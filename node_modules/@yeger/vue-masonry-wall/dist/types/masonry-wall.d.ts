import { VNodeProps, AllowedComponentProps, ComponentCustomProps, VNode, RendererNode, RendererElement } from 'vue';
import type { KeyMapper, NonEmptyArray, Vue3ComponentEmits } from '@yeger/vue-masonry-wall-core';
declare const _default: <T>(__VLS_props: {
    columnWidth?: number | NonEmptyArray<number> | undefined;
    items: T[];
    gap?: number | undefined;
    rtl?: boolean | undefined;
    ssrColumns?: number | undefined;
    scrollContainer?: HTMLElement | null | undefined;
    minColumns?: number | undefined;
    maxColumns?: number | undefined;
    keyMapper?: KeyMapper<T> | undefined;
} & VNodeProps & AllowedComponentProps & ComponentCustomProps, __VLS_ctx?: Pick<{
    props: {
        columnWidth?: number | NonEmptyArray<number> | undefined;
        items: T[];
        gap?: number | undefined;
        rtl?: boolean | undefined;
        ssrColumns?: number | undefined;
        scrollContainer?: HTMLElement | null | undefined;
        minColumns?: number | undefined;
        maxColumns?: number | undefined;
        keyMapper?: KeyMapper<T> | undefined;
    };
    expose(exposed: {}): void;
    attrs: any;
    slots: {
        default?: ((props: {
            item: T;
            column: number;
            row: number;
            index: number;
        }) => any) | undefined;
    };
    emit: Vue3ComponentEmits;
}, "attrs" | "emit" | "slots"> | undefined, __VLS_setup?: Promise<{
    props: {
        columnWidth?: number | NonEmptyArray<number> | undefined;
        items: T[];
        gap?: number | undefined;
        rtl?: boolean | undefined;
        ssrColumns?: number | undefined;
        scrollContainer?: HTMLElement | null | undefined;
        minColumns?: number | undefined;
        maxColumns?: number | undefined;
        keyMapper?: KeyMapper<T> | undefined;
    };
    expose(exposed: {}): void;
    attrs: any;
    slots: {
        default?: ((props: {
            item: T;
            column: number;
            row: number;
            index: number;
        }) => any) | undefined;
    };
    emit: Vue3ComponentEmits;
}>) => VNode<RendererNode, RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            columnWidth?: number | NonEmptyArray<number> | undefined;
            items: T[];
            gap?: number | undefined;
            rtl?: boolean | undefined;
            ssrColumns?: number | undefined;
            scrollContainer?: HTMLElement | null | undefined;
            minColumns?: number | undefined;
            maxColumns?: number | undefined;
            keyMapper?: KeyMapper<T> | undefined;
        };
        expose(exposed: {}): void;
        attrs: any;
        slots: {
            default?: ((props: {
                item: T;
                column: number;
                row: number;
                index: number;
            }) => any) | undefined;
        };
        emit: Vue3ComponentEmits;
    } | undefined;
};
export default _default;
