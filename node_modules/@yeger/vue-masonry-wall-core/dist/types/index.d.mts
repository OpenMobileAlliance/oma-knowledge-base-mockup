import type { LifecycleHook, VueRef, VueVersion, Watch } from '@yeger/vue-lib-adapter';
export interface ComponentProps<T> {
    columnWidth?: number | NonEmptyArray<number>;
    items: T[];
    gap?: number;
    rtl?: boolean;
    ssrColumns?: number;
    scrollContainer?: HTMLElement | null;
    minColumns?: number;
    maxColumns?: number;
    keyMapper?: KeyMapper<T>;
}
export type NonEmptyArray<T> = [T, ...T[]];
export type Column = number[];
export interface Vue2ComponentEmits {
    (event: 'redraw'): void;
    (event: 'redraw-skip'): void;
}
export interface Vue3ComponentEmits {
    (event: 'redraw'): void;
    (event: 'redrawSkip'): void;
}
export declare const defaults: {
    readonly columnWidth: 400;
    readonly gap: 0;
    readonly keyMapper: (_item: unknown, _column: number, _row: number, index: number) => number;
    readonly minColumns: 1;
    readonly maxColumns: undefined;
    readonly rtl: false;
    readonly scrollContainer: null;
    readonly ssrColumns: 0;
};
export type KeyMapper<T> = (item: T, column: number, row: number, index: number) => string | number | symbol | undefined;
export interface HookProps<T> {
    columns: VueRef<Column[]>;
    columnWidth: VueRef<number | NonEmptyArray<number>>;
    emit: Vue2ComponentEmits | Vue3ComponentEmits;
    gap: VueRef<number>;
    items: VueRef<T[]>;
    keyMapper: VueRef<KeyMapper<T>>;
    maxColumns: VueRef<number | undefined>;
    minColumns: VueRef<number | undefined>;
    nextTick: () => Promise<void>;
    onBeforeUnmount: LifecycleHook;
    onMounted: LifecycleHook;
    rtl: VueRef<boolean>;
    scrollContainer: VueRef<HTMLElement | null>;
    ssrColumns: VueRef<number>;
    vue: VueVersion;
    wall: VueRef<HTMLDivElement>;
    watch: Watch;
}
export declare function useMasonryWall<T>({ columns, columnWidth, emit, gap, items, maxColumns, minColumns, nextTick, onBeforeUnmount, onMounted, rtl, scrollContainer, ssrColumns, vue, wall, watch, }: HookProps<T>): {
    getColumnWidthTarget: (columnIndex: number) => number;
};
