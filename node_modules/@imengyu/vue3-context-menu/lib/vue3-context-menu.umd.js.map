{"version":3,"file":"vue3-context-menu.umd.js","sources":["../library/ContextMenuMutex.ts","../library/ContextMenuDefine.ts","../library/ContextMenuUtils.ts","../library/ContextMenuIconCheck.vue","../library/ContextMenuIconRight.vue","../library/ContextMenuItem.vue","../library/ContextMenuSeparator.vue","../library/ContextMenuSeparator.vue","../library/ContextSubMenu.vue","../library/ContextSubMenu.vue","../library/ContextSubMenuWrapper.vue","../library/ContextMenu.vue","../library/ContextMenuGroup.vue","../library/ContextMenuInstance.ts","../library/MenuBarIconMenu.vue","../library/MenuBar.vue"],"sourcesContent":["import type { ContextMenuInstance } from \"./ContextMenuDefine\";\r\n\r\nlet currentOpenedContextMenu : ContextMenuInstance|null = null;\r\n\r\n\r\nexport function checkOpenedContextMenu() : boolean {\r\n  return currentOpenedContextMenu !== null;\r\n}\r\nexport function addOpenedContextMenu(inst: ContextMenuInstance) : void {\r\n  if (currentOpenedContextMenu)\r\n    closeContextMenu();\r\n  currentOpenedContextMenu = inst;\r\n}\r\nexport function removeOpenedContextMenu(inst: ContextMenuInstance) : void {\r\n  if (inst === currentOpenedContextMenu)\r\n    currentOpenedContextMenu = null;\r\n}  \r\n/**\r\n * Close the currently open menu\r\n */\r\nexport function closeContextMenu() : void {\r\n  if (currentOpenedContextMenu) {\r\n    currentOpenedContextMenu.closeMenu();\r\n    currentOpenedContextMenu = null;\r\n  }\r\n}\r\n","import type { ComputedRef, Ref, SVGAttributes, TransitionProps, VNode } from \"vue\";\r\n\r\n/**\r\n * Default config\r\n */\r\nexport const MenuConstOptions = {\r\n  defaultDirection: 'br',\r\n  defaultMinWidth: 100,\r\n  defaultMaxWidth: 600,\r\n  defaultZindex: 100,\r\n  defaultZoom: 1,\r\n  defaultAdjustPadding: {\r\n    x: 0,\r\n    y: 10.\r\n  },\r\n}\r\n\r\n/**\r\n * ContextMenu Component ref interface,\r\n * You can use `(this.$refs.myMenu as ContextMenuInstance)` or `const mymenu = ref<ContextMenuInstance>()`\r\n */\r\nexport interface ContextMenuInstance {\r\n  /**\r\n   * Close this menu.\r\n   * @param fromItem The last clicked menu item, will pass to `MenuOptions.onClose` callback, if user does not click any item, can be `undefined`.\r\n   */\r\n  closeMenu(fromItem?: MenuItem|undefined): void;\r\n  /**\r\n   * Check if the menu is currently closed.\r\n   */\r\n  isClosed(): boolean;\r\n  /**\r\n   * Get current Menu root instance.\r\n   * @returns Return ContextSubMenuInstance of root, return undefined if menu is not showing.\r\n   */\r\n  getMenuRef(): ContextSubMenuInstance|undefined;\r\n  /**\r\n   * Get root menu size.\r\n   * @returns Return root menu size in pixel, return all zero if menu is not showing.\r\n   */\r\n  getMenuDimensions(): { width: number, height: number };\r\n}\r\n\r\n/**\r\n * Define that Submenu holder component exposed props\r\n * \r\n * Can get by `ContextMenuInstance.getMenuRef`.\r\n */\r\nexport interface ContextSubMenuInstance \r\n{\r\n  /**\r\n   * Get Root element of this submenu\r\n   */\r\n  getSubmenuRoot: () => HTMLElement | undefined;\r\n  /**\r\n   * Get Inner container element of this submenu\r\n   */\r\n  getMenu: () => HTMLElement | undefined;\r\n  /**\r\n   * Get child menu item by array index, Only after the parent submenu is displayed can the child items be retrieved.\r\n   * @param index Array index \r\n   * @returns You can obtain control instance `MenuItemContext according to the index to control menu items.\r\n   */\r\n  getChildItem: (index: number) => MenuItemContext | undefined;\r\n  /**\r\n   * Get submenu root element size.\r\n   * @returns Return root menu size in pixel, return all zero if menu is not showing.\r\n   */\r\n  getMenuDimensions(): { width: number, height: number };\r\n  /**\r\n   * Get submenu current scroll value (same as element.scrollTop)\r\n   * @returns \r\n   */\r\n  getScrollValue: () => number,\r\n  /**\r\n   * Set submenu current scroll value (same as element.scrollTop)\r\n   * @returns \r\n   */\r\n  setScrollValue: (v: number) => void,\r\n  /**\r\n   * Get submenu max scroll height (same as element.scrollHeight)\r\n   * @returns \r\n   */\r\n  getScrollHeight: () => number,\r\n  /**\r\n   * Get max submenu height\r\n   * @returns \r\n   */\r\n  getMaxHeight: () => number,\r\n  /**\r\n   * Get submenu current position (Relative to the parent item)\r\n   * @returns \r\n   */\r\n  getPosition: () => { x: number, y: number },\r\n  /**\r\n   * Set submenu current position (Relative to the parent item)\r\n   * @returns \r\n   */\r\n  setPosition: (x: number, y: number) => void;\r\n}\r\n\r\n/**\r\n * Ref define of ContextMenuGroup\r\n */\r\nexport interface ContextMenuGroupRef\r\n{\r\n  /**\r\n   * Get ContextSubMenuInstance of this group\r\n   */\r\n  getSubMenuRef(): ContextSubMenuInstance;\r\n  /**\r\n   * Get MenuItemContext of this item.\r\n   */\r\n  getMenuItemRef(): ContextSubMenuInstance;\r\n}\r\n\r\n/**\r\n * The internal info context for menu item\r\n */\r\nexport interface MenuItemContext {\r\n  /**\r\n   * Get current showing submenu instance.\r\n   * @returns Return ContextSubMenuInstance of current submenu, return undefined if menu is not showing.\r\n   */\r\n  getSubMenuInstance: () => ContextSubMenuInstance|undefined;\r\n  /**\r\n   * Show submenu of this item.\r\n   * @returns \r\n   */\r\n  showSubMenu: () => boolean,\r\n  /**\r\n   * Force hide submenu of this item.\r\n   */\r\n  hideSubMenu: () => void,\r\n  /**\r\n   * Get html Element of this item.\r\n   */\r\n  getElement: () => HTMLElement|undefined,\r\n  /**\r\n   * Check is this item disabled or hidden.\r\n   * @returns \r\n   */\r\n  isDisabledOrHidden: () => boolean,\r\n\r\n  focus: () => void,\r\n  blur: () => void,\r\n  click: (e: MouseEvent|KeyboardEvent) => void,\r\n}\r\n\r\nexport type MenuPopDirection = 'br'|'b'|'bl'|'tr'|'t'|'tl'|'l'|'r';\r\nexport type MenuChildren = MenuItem[];\r\n\r\n\r\nexport interface MenuOptions {\r\n  /**\r\n   * The items for this menu.\r\n   */\r\n  items\t?:\tMenuItem[];\r\n  /**\r\n   * Menu display x position.\r\n   */\r\n  x: number;\r\n  /**\r\n   * Menu display y position.\r\n   */\r\n  y: number;\r\n  /**\r\n  * X-coordinate offset of submenu and parent menu.\r\n  */\r\n  xOffset\t?: number;\r\n  /**\r\n  * Y-coordinate offset of submenu and parent menu.\r\n  */\r\n  yOffset ?: number;\r\n  /**\r\n   * Set the mian menu pop-up direction relative to coordinates.\r\n   *\r\n   * Default is `'br'`, if `adjustPosition` is true then the menu will determine\r\n   * the pop-up direction based on its distance from the screen edge.\r\n   *\r\n   * @default 'br'\r\n   */\r\n  direction ?: MenuPopDirection,\r\n  /**\r\n   * The z-index of this menu.\r\n   */\r\n  zIndex ?: number;\r\n  /**\r\n   * The zoom of this menu.\r\n   */\r\n  zoom ?: number;\r\n  /**\r\n   * Custom menu class.\r\n   */\r\n  customClass\t?:\tstring;\r\n  /**\r\n   * Set whether users can use the mouse scroll wheel to scroll through long menus in the menu area.\r\n   *\r\n   * @default false\r\n   */\r\n  mouseScroll ?: boolean;\r\n  /**\r\n   * Determine whether the up/down buttons in the menu item require space holder.\r\n   * The purpose of this variable is because some menu themes add blank padding above and below the menu,\r\n   * which are just enough to place up/down buttons.\r\n   * If there is no blank padding in your custom menu theme, you can set this field to provide blank space for up/down buttons to prevent obscuring menu items.\r\n   *\r\n   * @default false\r\n   */\r\n  updownButtonSpaceholder?: boolean;\r\n  /**\r\n   * Theme for this menu. Default is 'default'\r\n   *\r\n   * |theme|explain|example image|\r\n   * |--|--|--|\r\n   * |`default`|Default theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-default.jpg)|\r\n   * |`default dark`|Default theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-default-dark.jpg)|\r\n   * |`flat`|Simple flat theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-flat.jpg)|\r\n   * |`flat dark`|Simple flat theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-flat-dark.jpg)|\r\n   * |`win10`|Win10 like theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-win10.jpg)|\r\n   * |`win10 dark`|Win10 like theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-win10-dark.jpg)|\r\n   * |`mac`|Mac like theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-mac.jpg)|\r\n   * |`mac dark`|Mac like theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-mac-dark.jpg)|\r\n   *\r\n   * You can write new theme in your own css,\r\n   * customize your theme by overriding the default styles, for example:\r\n   * ```scss\r\n   * .mx-context-menu.my-theme-name {\r\n      & {\r\n        //Here can override css vars\r\n        --mx-menu-backgroud: #ececec;\r\n        --mx-menu-hover-backgroud: #0165e1;\r\n      }\r\n\r\n      //Customize the style of the menu here\r\n      padding: 8px 0;\r\n      box-shadow: 0px 5px 7px 1px var(--mx-menu-shadow-color);\r\n      border: 1px solid var(--mx-menu-border-color);\r\n\r\n      //Customize the style of the menu item\r\n      .mx-context-menu-item {\r\n        border-radius: 5px;\r\n        margin: 0 6px;\r\n        padding: 3px 6px;\r\n      }\r\n    }\r\n   * ```\r\n   */\r\n  theme\t?: string;\r\n  /**\r\n   * If your element in menu item has this className, click it will ignore event.\r\n   */\r\n  ignoreClickClassName?: string,\r\n  /**\r\n   * Set should close menu when the user click on other places.\r\n   *\r\n   * @default true\r\n   */\r\n  clickCloseOnOutside ?: boolean;\r\n  /**\r\n   * If your element in menu item has this className, click it will ignore event and close hole menu.\r\n   */\r\n  clickCloseClassName?: string,\r\n  /**\r\n   * Custom icon library font class name. (global)\r\n   *\r\n   * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n   */\r\n  iconFontClass ?:\tstring;\r\n  /**\r\n   * The Vue Transition props used when menu show or hide.\r\n   * @default undefined\r\n   */\r\n  menuTransitionProps ?: TransitionProps;\r\n  /**\r\n   * Should a fixed-width icon area be reserved for menu items without icon. (global)\r\n   *\r\n   * Default is true.\r\n   *\r\n   * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n   */\r\n  preserveIconWidth ?: boolean;\r\n  /**\r\n   * Set whether the user can use keyboard keys to control the current menu.\r\n   *\r\n   * Default: true\r\n   *\r\n   * The control logic is consistent with the Windows right-click menu:\r\n   * * Escape : Close current menu\r\n   * * Enter : Click current menu item\r\n   * * ArrowDown : Select the down menu item\r\n   * * ArrowUp : Select the up menu item\r\n   * * ArrowLeft : Back previous submenu\r\n   * * ArrowRight : Open current menu item submenu\r\n   * * Home : Select the first menu item\r\n   * * End : Select the last menu item\r\n   */\r\n  keyboardControl ?: boolean;\r\n  /**\r\n   * Maximum width of main menu (in pixels)\r\n   */\r\n  maxWidth ?: number;\r\n  /**\r\n   * Minimum width of main menu (pixels)\r\n   */\r\n  minWidth ?: number;\r\n  /**\r\n   * Close when user scroll mouse ? Default is true.\r\n   */\r\n  closeWhenScroll ?: boolean;\r\n  /**\r\n   * Padding for submenu position adjust. Default is `{ x：0, y: 10 }`.\r\n   */\r\n  adjustPadding?: { x: number, y: number }|number,\r\n  /**\r\n   * By default, the menu will automatically adjust its position to prevent it overflow the container.\r\n   *\r\n   * If you allow menu overflow containers, you can set this to false.\r\n   *\r\n   * Default is true.\r\n   */\r\n  adjustPosition?: boolean,\r\n  /**\r\n   * Return the mounted node for MenuRoot.\r\n   *\r\n   * Note: After you change the mount node, the menu display position may be incorrect.\r\n   *\r\n   * * The MenuOptions.x is the distance from the menu to the left edge of the container (container should `position: relative;`);\r\n   * * The MenuOptions.y is the distance from the menu to the top edge of the container (container should `position: relative;`);;\r\n   *\r\n   * So, you need to change the x and y values you passed in to ensure that the display position is correct.\r\n   *\r\n   * You may need to use `ContextMenu.transformMenuPosition` to transform the menu display position:\r\n   *\r\n   * ```\r\n   * function onContextMenu(e: MouseEvent) {\r\n      //MyContainerElement is the MenuRoot\r\n      const scaledPosition = ContextMenu.transformMenuPosition(e.target as HTMLElement, e.offsetX, e.offsetY, MyContainerElement);\r\n      menuData.x = scaledPosition.x;\r\n      menuData.y = scaledPosition.y;\r\n      //show menu\r\n      ContextMenu.showContextMenu(menuData);\r\n    }\r\n   * ```\r\n   */\r\n  getContainer ?: HTMLElement | (() => HTMLElement);\r\n\r\n  /**\r\n   * This event emit when this menu is closing. (Usually used in function mode)\r\n   * @param lastClickItem The last clicked menu item, if user does not click any item, it is `undefined`. This param only valid in function mode.\r\n   */\r\n  onClose ?: ((lastClickItem: MenuItem|undefined) => void) | undefined;\r\n  /**\r\n   * When `clickCloseOnOutside` is set to `false`, and user click on other places will emit this event.\r\n   */\r\n  onClickOnOutside ?: (e: MouseEvent) => void;\r\n  /**\r\n   * Event for MenuBar component\r\n   */\r\n  onKeyFocusMoveLeft ?:  (() => void) | undefined;\r\n  /**\r\n   * Event for MenuBar component\r\n   */\r\n  onKeyFocusMoveRight ?:  (() => void) | undefined;\r\n}\r\nexport interface MenuItem {\r\n  /**\r\n   * The label of this menu item.\r\n   *\r\n   * Can be a callback. Use `h` to render custom content.\r\n   *\r\n   * ```js\r\n   * {\r\n   *   label: h('div', {\r\n   *     style: {\r\n   *       fontSize: '20px',\r\n   *       color: '#f98',\r\n   *     }\r\n   *   }, \"Item with custom render\"),\r\n   * },\r\n   * ```\r\n   */\r\n  label ?: string|VNode|((label: string) => VNode),\r\n  /**\r\n   * The icon for this menu item.\r\n   */\r\n  icon ?: string|VNode|((icon: string) => VNode),\r\n  /**\r\n   * Custom icon library font class name.\r\n   *\r\n   * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n   */\r\n  iconFontClass ?: string,\r\n  /**\r\n   * Should a fixed-width icon area be reserved for menu items without icon. (this item)\r\n   *\r\n   * Default is inherit from `MenuOptions.preserveIconWidth` .\r\n   *\r\n   * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n   */\r\n  preserveIconWidth ?: boolean;\r\n  /**\r\n   * Display icons use svg symbol (`<use xlink:href=\"#icon-symbol-name\">`) ， only valid when icon attribute is empty.\r\n   */\r\n  svgIcon ?: string,\r\n  /**\r\n   * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.\r\n   */\r\n  svgProps ?: SVGAttributes,\r\n  /**\r\n   * Disable menu item?\r\n   */\r\n  disabled ?: boolean|ComputedRef<boolean>,\r\n  /**\r\n   * Hide menu item?\r\n   */\r\n  hidden ?: boolean|ComputedRef<boolean>,\r\n  /**\r\n   * Is this menu item checked?\r\n   *\r\n   * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.\r\n   */\r\n  checked ?: boolean|ComputedRef<boolean>,\r\n  /**\r\n   * Shortcut key text display on the right.\r\n   *\r\n   * The shortcut keys here are only for display. You need to handle the key events by yourself.\r\n   */\r\n  shortcut ?: string,\r\n  /**\r\n   * Set the submenu pop-up direction relative to coordinates.\r\n   *\r\n   * Default is inherted from `MenuOptions.direction`, if `adjustSubMenuPosition` is true then the submenu will determine\r\n   * the pop-up direction based on its distance from the screen edge.\r\n   *\r\n   */\r\n  direction ?: MenuPopDirection,\r\n  /**\r\n   * By default, the submenu will automatically adjust its position to prevent it overflow the container.\r\n   *\r\n   * If you allow menu overflow containers, you can set this to false.\r\n   *\r\n   * Default is inherit from `MenuOptions.adjustPosition`.\r\n   */\r\n  adjustSubMenuPosition ?: boolean,\r\n  /**\r\n   * When there are subitems in this item, is it allowed to trigger its own click event? Default is false\r\n   */\r\n  clickableWhenHasChildren ?: boolean,\r\n  /**\r\n   * Should close menu when Click this menu item ?\r\n   */\r\n  clickClose ?: boolean,\r\n  /**\r\n   * Is this menu item separated from the menu item?\r\n   *\r\n   * * `true` or `'down'`: Separator is show below menu.\r\n   * * `'up'`: Separator is show above menu.\r\n   * * `'self'`: Mark this item is a Separator.\r\n   * * `false`: No Separator.\r\n   */\r\n  divided ?: boolean|'up'|'down'|'self',\r\n  /**\r\n   * Custom css class for submenu\r\n   */\r\n  customClass ?: string,\r\n  /**\r\n   * Submenu maximum width (in pixels).\r\n   */\r\n  maxWidth ?: number|string,\r\n  /**\r\n   * Submenu minimum width (in pixels).\r\n   */\r\n  minWidth ?: number|string,\r\n  /**\r\n   * Menu item click event handler.\r\n   *\r\n   * @param e The current event of `click` or `keydown` (when user use keyboard press this menu)\r\n   */\r\n  onClick ?: (e?: MouseEvent|KeyboardEvent) => void,\r\n  /**\r\n   * This event emit when submenu of this item is closing.\r\n   * \r\n   * @param itemInstance The instance of this submenu, undefined if in topmost level. \r\n   */\r\n  onSubMenuClose ?: ((itemInstance?: MenuItemContext) => void) | undefined;\r\n  /**\r\n   * This event emit when submenu of this item is showing.\r\n   * \r\n   * @param itemInstance The instance of this submenu, undefined if in topmost level. \r\n   */\r\n  onSubMenuOpen ?: ((itemInstance?: MenuItemContext) => void) | undefined;\r\n  /**\r\n   * A custom render callback that allows you to customize the rendering\r\n   *  of the current item.\r\n   */\r\n  customRender ?: VNode|((item: MenuItem) => VNode),\r\n  /**\r\n   * Child menu items (Valid in function mode).\r\n   */\r\n  children ?: MenuChildren,\r\n}\r\n\r\nexport interface ContextMenuPositionData {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport declare interface MenuItemRenderData extends Omit<MenuItem, 'children'|'customRender'|'onClick'> {\r\n  /**\r\n   * Global theme\r\n   */\r\n  theme: 'light'|'dark',\r\n  /**\r\n   * This value indicates whether the current menu submenu is open\r\n   */\r\n  isOpen: boolean,\r\n  /**\r\n   * This value indicates whether the current menu has submenus\r\n   */\r\n  hasChildren: boolean,\r\n  /**\r\n   * Click event callback of custom element, which is used for menu internal event\r\n   */\r\n  onClick: (e: MouseEvent) => void,\r\n  /**\r\n   * MouseEnter event callback of custom element, which is used for menu internal event\r\n   */\r\n  onMouseEnter: (e: MouseEvent) => void,\r\n}\r\n","import { defineComponent, toRefs } from \"vue\";\r\nimport type { VNode } from \"vue\";\r\nimport type { MenuOptions } from \"./ContextMenuDefine\";\r\nimport { MenuConstOptions } from \"./ContextMenuDefine\";\r\n\r\n/**\r\n * Get absolute y position of HTMLElement\r\n * @param e Element\r\n * @param stopNode Specify the node for recursive termination, default to body\r\n * @returns \r\n */\r\nexport function getTop(e: HTMLElement, stopNode?: HTMLElement): number {\r\n  let offset = e.offsetTop;\r\n  if (e.offsetParent != null && e.offsetParent != stopNode) {\r\n    offset -= e.offsetParent.scrollTop;\r\n    offset += getTop(e.offsetParent as HTMLElement, stopNode);\r\n  }\r\n  return offset;\r\n}\r\n/**\r\n * Get absolute x position of HTMLElement\r\n * @param e Element\r\n * @param stopNode Specify the node for recursive termination, default to body\r\n * @returns \r\n */\r\nexport function getLeft(e: HTMLElement, stopNode?: HTMLElement): number {\r\n  let offset = e.offsetLeft;\r\n  if (e.offsetParent != null && e.offsetParent != stopNode) {\r\n    offset -= e.offsetParent.scrollLeft;\r\n    offset += getLeft(e.offsetParent as HTMLElement, stopNode);\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * If your `body` element is in a scaled state (e.g. `transform: scale(0.5)`), \r\n * this may lead to the wrong position of the menu display. \r\n * You can use this function to transform the menu display position:\r\n * \r\n * ```ts\r\n * \r\n  import ContextMenu from '@imengyu/vue3-context-menu'\r\n\r\n  function onContextMenu(e: MouseEvent) {\r\n    const scaledPosition = ContextMenu.transformMenuPosition(e.target as HTMLElement, e.offsetX, e.offsetY);\r\n    //Full code of menuData is in `/examples/views/InScaledBody.vue`\r\n    menuData.x = scaledPosition.x;\r\n    menuData.y = scaledPosition.y;\r\n    //show menu\r\n    ContextMenu.showContextMenu(menuData);\r\n  }\r\n  * ```\r\n  * @param e Current click element\r\n  * @param offsetX MouseEvent.offsetX\r\n  * @param offsetY MouseEvent.offsetY\r\n  */\r\nexport function transformMenuPosition(e: HTMLElement, offsetX: number, offsetY: number, container?: HTMLElement): {\r\n  x: number,\r\n  y: number,\r\n} {\r\n  return {\r\n    x: getLeft(e, container) + offsetX,\r\n    y: getTop(e, container) + offsetY,\r\n  };\r\n}\r\n\r\nconst DEFAULT_CONTAINER_ID = 'mx-menu-default-container';\r\nconst GEN_CONTAINER_ID = 'mx-menu-container-';\r\nlet containerId = 0;\r\n\r\nexport function removeContainer(container: HTMLElement) : void {\r\n  container.parentNode?.removeChild(container);\r\n}\r\nexport function genContainer(options: MenuOptions) : {\r\n  eleId: string,\r\n  container: HTMLElement,\r\n  isNew: boolean,\r\n} {\r\n  const { getContainer, zIndex } = options;\r\n\r\n  if (getContainer) {\r\n    const container = typeof getContainer === 'function' ? getContainer() : getContainer;\r\n    if (container) {\r\n      let eleId = container.getAttribute('id');\r\n      if (!eleId) {\r\n        eleId = GEN_CONTAINER_ID + (containerId++);\r\n        container.setAttribute('id', eleId);\r\n      }\r\n      return {\r\n        eleId,\r\n        container,\r\n        isNew: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  let container = document.getElementById(DEFAULT_CONTAINER_ID);\r\n  if (!container) {\r\n    container = document.createElement('div');\r\n    container.setAttribute('id', DEFAULT_CONTAINER_ID);\r\n    container.setAttribute('class', 'mx-menu-ghost-host fullscreen');\r\n    document.body.appendChild(container);\r\n  }\r\n  container.style.zIndex = zIndex?.toString() || MenuConstOptions.defaultZindex.toString();\r\n  return {\r\n    eleId: DEFAULT_CONTAINER_ID,\r\n    container,\r\n    isNew: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Number to px string\r\n * @param value \r\n * @returns \r\n */\r\nexport function solveNumberOrStringSize(value: string|number) : string {\r\n  return typeof value === 'number' ? `${value}px` : value;\r\n}\r\n\r\n/**\r\n * Render a VNode\r\n */\r\nexport const VNodeRender = defineComponent({\r\n  props: {\r\n    /**\r\n     * Can be VNode or (data: unknown) => VNode\r\n     */\r\n    vnode: {\r\n      type: null,\r\n    },\r\n    /**\r\n     * If vnode is a callback, this data will be passed to the callback first parameter.\r\n     * @default null\r\n     */\r\n    data: {\r\n      type: null,\r\n      default: null,\r\n    },\r\n  },\r\n  setup(props) {\r\n    const { vnode, data } = toRefs(props);\r\n    return () => typeof vnode.value === 'function' ? (vnode.value as unknown as (data: unknown) => VNode)(data.value) : vnode.value as unknown as VNode;\r\n  },\r\n})","<template>\r\n  <svg class=\"mx-checked-mark\" aria-hidden=\"true\" viewBox=\"0 0 1024 1024\">\r\n    <path d=\"M129.3,428.6L52,512l345,372.5l575-620.8l-69.5-75L400.4,718.2L129.3,428.6z\"></path>\r\n  </svg>\r\n</template>","<template>\r\n  <svg class=\"mx-right-arrow\" aria-hidden=\"true\" viewBox=\"0 0 1024 1024\">\r\n    <path d=\"M307.018 49.445c11.517 0 23.032 4.394 31.819 13.18L756.404 480.18c8.439 8.438 13.181 19.885 13.181 31.82s-4.741 23.38-13.181 31.82L338.838 961.376c-17.574 17.573-46.065 17.573-63.64-0.001-17.573-17.573-17.573-46.065 0.001-63.64L660.944 512 275.198 126.265c-17.574-17.573-17.574-46.066-0.001-63.64C283.985 53.839 295.501 49.445 307.018 49.445z\"></path>\r\n  </svg>\r\n</template>","<template>\r\n  <div v-if=\"!hidden\" class=\"mx-context-menu-item-wrapper\" ref=\"menuItemRef\" data-type=\"ContextMenuItem\">\r\n    <!--Custom render-->\r\n    <VNodeRender v-if=\"globalHasSlot('itemRender')\" :vnode=\"() => globalRenderSlot('itemRender', getItemDataForChildren())\" />\r\n    <VNodeRender v-else-if=\"customRender\" :vnode=\"customRender\" :data=\"getItemDataForChildren()\" />\r\n    <!--Default item-->\r\n    <div \r\n      v-else\r\n      :class=\"[\r\n        'mx-context-menu-item',\r\n        (disabled ? 'disabled' : ''),\r\n        (keyBoardFocusMenu ? 'keyboard-focus' : ''),\r\n        (customClass ? (' ' + customClass) : ''),\r\n        (showSubMenu ? 'open' : ''),\r\n      ]\"\r\n      @click=\"onClick\"\r\n      @mouseenter=\"onMouseEnter\"\r\n    >\r\n      <slot>\r\n        <div class=\"mx-item-row\">\r\n          <div :class=\"[\r\n            'mx-icon-placeholder',\r\n            preserveIconWidth ? 'preserve-width': '',\r\n          ]\">\r\n            <slot name=\"icon\">\r\n              <VNodeRender v-if=\"globalHasSlot('itemIconRender')\" :vnode=\"() => globalRenderSlot('itemIconRender', getItemDataForChildren())\" />\r\n              <svg v-else-if=\"typeof svgIcon === 'string' && svgIcon\" class=\"icon svg\" v-bind=\"svgProps\">\r\n                <use :xlink:href=\"svgIcon\"></use>\r\n              </svg>\r\n              <VNodeRender v-else-if=\"(typeof icon !== 'string')\" :vnode=\"icon\" :data=\"icon\" />\r\n              <i v-else-if=\"typeof icon === 'string' && icon !== ''\" :class=\"icon + ' icon '+ iconFontClass + ' ' + options.iconFontClass\"></i>\r\n            </slot>\r\n            <slot v-if=\"checked\" name=\"check\">\r\n              <VNodeRender v-if=\"globalHasSlot('itemCheckRender')\" :vnode=\"() => globalRenderSlot('itemCheckRender', getItemDataForChildren())\" />\r\n              <ContextMenuIconCheck />\r\n            </slot>\r\n          </div>\r\n          <slot name=\"label\">\r\n            <VNodeRender v-if=\"globalHasSlot('itemLabelRender')\" :vnode=\"() => globalRenderSlot('itemLabelRender', getItemDataForChildren())\" />\r\n            <span class=\"label\" v-else-if=\"typeof label === 'string'\">{{ label }}</span>\r\n            <VNodeRender v-else :vnode=\"label\" :data=\"label\" />\r\n          </slot>\r\n        </div>\r\n        <div class=\"mx-item-row\">\r\n          <slot v-if=\"shortcut\" name=\"shortcut\">\r\n            <VNodeRender v-if=\"globalHasSlot('itemShortcutRender')\" :vnode=\"() => globalRenderSlot('itemShortcutRender', getItemDataForChildren())\" />\r\n            <span class=\"mx-shortcut\">{{ shortcut }}</span>\r\n          </slot>\r\n          <slot v-if=\"showRightArrow\" name=\"rightArrow\">\r\n            <VNodeRender v-if=\"globalHasSlot('itemRightArrowRender')\" :vnode=\"() => globalRenderSlot('itemRightArrowRender', getItemDataForChildren())\" />\r\n            <ContextMenuIconRight />\r\n          </slot>\r\n        </div>\r\n      </slot>\r\n    </div>\r\n    \r\n    <!--Sub menu render-->\r\n    <Transition v-if=\"options.menuTransitionProps\" v-bind=\"options.menuTransitionProps\">\r\n      <slot v-if=\"showSubMenu\" name=\"submenu\"></slot>\r\n    </Transition>\r\n    <slot v-else-if=\"showSubMenu\" name=\"submenu\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { inject, nextTick, onBeforeUnmount, onMounted, type PropType, ref, type SVGAttributes, toRefs, type TransitionProps, type Ref, computed, provide } from 'vue'\r\nimport type { SubMenuParentContext } from './ContextSubMenu.vue'\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextMenu.vue'\r\nimport type { MenuItem, MenuItemContext, MenuOptions } from './ContextMenuDefine'\r\nimport { VNodeRender } from './ContextMenuUtils'\r\nimport ContextMenuIconCheck from './ContextMenuIconCheck.vue'\r\nimport ContextMenuIconRight from './ContextMenuIconRight.vue'\r\n\r\n/**\r\n * Menu Item\r\n */\r\n\r\nconst props = defineProps({\r\n  /**\r\n   * Is this menu disabled? \r\n   */\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  /**\r\n   * Is this menu hidden? \r\n   */\r\n  hidden: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  customRender: {\r\n    type: Function,\r\n    default: null\r\n  },\r\n  /**\r\n   * Custom css class for submenu\r\n   */\r\n  customClass: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  clickHandler: {\r\n    type: Function as PropType<(e: MouseEvent|KeyboardEvent) => void>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Menu label\r\n   */\r\n  label: {\r\n    type: [String, Object, Function],\r\n    default: ''\r\n  },\r\n  /**\r\n   * Menu icon (for icon class)\r\n   */\r\n  icon: {\r\n    type: [String, Object, Function],\r\n    default: ''\r\n  },\r\n  /**\r\n   * Custom icon library font class name.\r\n   * \r\n   * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n   */\r\n  iconFontClass: {\r\n    type: String,\r\n    default: 'iconfont'\r\n  },\r\n  /**\r\n   * Is this menu item checked?\r\n   * \r\n   * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.\r\n   */\r\n  checked: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  /**\r\n   * Shortcut key text display on the right.\r\n   * \r\n   * The shortcut keys here are only for display. You need to handle the key events by yourself.\r\n   */\r\n  shortcut: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  /**\r\n   * Display icons use svg symbol (`<use xlink:href=\"#icon-symbol-name\">`) ， only valid when icon attribute is empty.\r\n   */\r\n  svgIcon: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  /**\r\n   * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.\r\n   */\r\n  svgProps: {\r\n    type: Object as PropType<SVGAttributes>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Should a fixed-width icon area be reserved for menu items without icon. (this item)\r\n   * \r\n   * Default is true .\r\n   * \r\n   * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n   */\r\n  preserveIconWidth: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  /**\r\n   * Show right arrow on this menu?\r\n   */\r\n  showRightArrow: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  hasChildren: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  /**\r\n   * Should close menu when Click this menu item ?\r\n   */\r\n  clickClose: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  /**\r\n   * When there are subitems in this item, is it allowed to trigger its own click event? Default is false\r\n   */\r\n  clickableWhenHasChildren: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  rawMenuItem: {\r\n    type: Object as PropType<MenuItem>,\r\n    default: undefined\r\n  },\r\n});\r\nconst emit = defineEmits([\r\n  'click',\r\n  'subMenuOpen',\r\n  'subMenuClose',\r\n])\r\n\r\nconst { \r\n  clickHandler, clickClose, clickableWhenHasChildren, disabled, hidden,\r\n  label, icon, iconFontClass,\r\n  showRightArrow, shortcut,\r\n  hasChildren,\r\n} = toRefs(props);\r\nconst showSubMenu = ref(false);\r\nconst keyBoardFocusMenu = ref(false);\r\n\r\nconst menuItemRef = ref<HTMLElement>();\r\n\r\nconst options = inject('globalOptions') as Ref<MenuOptions>;\r\nconst globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\nconst globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\nconst globalCloseMenu = inject('globalCloseMenu') as (fromItem: MenuItem|undefined) => void;\r\n\r\nconst menuContext = inject('menuContext') as SubMenuParentContext;\r\n\r\n//Instance Contet for keyboadr control\r\nconst menuItemInstance : MenuItemContext = {\r\n  getSubMenuInstance: () => undefined,\r\n  showSubMenu: () => {\r\n    if (showSubMenu.value) {\r\n      //Mark current item\r\n      menuContext.markActiveMenuItem(menuItemInstance, true);\r\n      return true;\r\n    } else if (hasChildren.value) {\r\n      onMouseEnter();\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  hideSubMenu: () => {\r\n    //closeSubMenu();\r\n    menuContext.closeOtherSubMenu();\r\n  },\r\n  isDisabledOrHidden: () => disabled.value || hidden.value,\r\n  getElement: () => menuItemRef.value,\r\n  focus: () => keyBoardFocusMenu.value = true,\r\n  blur: () => keyBoardFocusMenu.value = false,\r\n  click: onClick,\r\n}\r\n\r\nprovide(\"menuItemInstance\", menuItemInstance);\r\n\r\nonMounted(() => {\r\n  if (menuContext.isMenuItemDataCollectedFlag()) {\r\n    //当前菜单条目是在整体加载完成后才显示的，此时菜单顺序已经无法知道，\r\n    //所以这里需要在父级元素中查找得出当前菜单的位置。\r\n    //\r\n    //The current menu item is displayed after the overall loading is completed. \r\n    //At this time, the menu order cannot be known, so here we need to \r\n    //find the position of the current menu in the parent element.\r\n    nextTick(() => {\r\n      let index = 0;\r\n      const parentEl = menuContext.getElement();\r\n      if (parentEl) {\r\n        let indexCounting = 0;\r\n        for (let i = 0; i < parentEl.children.length; i++) {\r\n          const el = parentEl.children[i];\r\n          if (el.getAttribute('data-type') === 'ContextMenuItem') {\r\n            if (el === menuItemRef.value) {\r\n              index = indexCounting;\r\n              break;\r\n            }\r\n            indexCounting++;\r\n          }\r\n        }\r\n      }\r\n      //Insert to pos\r\n      menuContext.addChildMenuItem(menuItemInstance, index);\r\n    });\r\n  } else\r\n    menuContext.addChildMenuItem(menuItemInstance);\r\n});\r\nonBeforeUnmount(() => {\r\n  menuContext.removeChildMenuItem(menuItemInstance);\r\n});\r\n\r\n//Click handler\r\nfunction onClick(e: MouseEvent|KeyboardEvent) {\r\n  //Ignore clicking when disabled\r\n  if (disabled.value)\r\n    return;\r\n  //Ignore clicking when click on some special elements\r\n  if (e) {\r\n    const currentTarget = e.target as HTMLElement;\r\n    if (currentTarget.classList.contains('mx-context-no-clickable'))\r\n      return;\r\n    if (options.value.ignoreClickClassName && currentTarget.classList.contains(options.value.ignoreClickClassName))\r\n      return;\r\n    if (options.value.clickCloseClassName && currentTarget.classList.contains(options.value.clickCloseClassName)) {\r\n      e.stopPropagation();\r\n      globalCloseMenu(props.rawMenuItem);\r\n      return;\r\n    }\r\n  }\r\n  //Has submenu?\r\n  if (hasChildren.value) {\r\n    if (clickableWhenHasChildren.value) {\r\n      if (typeof clickHandler.value === 'function')\r\n        clickHandler.value(e);\r\n      emit('click', e);\r\n    }\r\n    else if (!showSubMenu.value)\r\n      onMouseEnter();\r\n  } else {\r\n    //Call hander from options\r\n    if (typeof clickHandler.value === 'function') \r\n      clickHandler.value(e);\r\n    emit('click', e);\r\n    if (clickClose.value) {\r\n      //emit close\r\n      globalCloseMenu(props.rawMenuItem);\r\n    }\r\n  }\r\n}\r\n//MouseEnter handler: show item submenu\r\nfunction onMouseEnter(e?: MouseEvent) {\r\n  //Clear keyBoard focus style\r\n  keyBoardFocusMenu.value = false;\r\n\r\n  //等待一个延时，以防止用户过快移动鼠标导致菜单隐藏\r\n  //Wait for a delay to prevent the menu from being hidden due to the user moving the mouse too fast\r\n  if (!menuContext.checkCloseOtherSubMenuTimeOut())\r\n    menuContext.closeOtherSubMenu();\r\n\r\n  if (!disabled.value) {\r\n    //Mark current item\r\n    menuContext.markActiveMenuItem(menuItemInstance);\r\n\r\n    if (hasChildren.value) {\r\n      if (!e)\r\n        menuContext.markThisOpenedByKeyBoard();\r\n      //Open sub menu\r\n      menuContext.addOpenedSubMenu(closeSubMenu);\r\n      showSubMenu.value = true;\r\n      nextTick(() => emit('subMenuOpen', menuItemInstance));\r\n    }\r\n  }\r\n}\r\nfunction closeSubMenu() \r\n{\r\n  keyBoardFocusMenu.value = false;\r\n  showSubMenu.value = false;\r\n  emit('subMenuClose', menuItemInstance);\r\n}\r\n//Data for custom render\r\nfunction getItemDataForChildren() {\r\n  return {\r\n    disabled: disabled.value,\r\n    label: label.value,\r\n    icon: icon.value,\r\n    iconFontClass: iconFontClass.value,\r\n    showRightArrow: showRightArrow.value,\r\n    clickClose: clickClose.value,\r\n    clickableWhenHasChildren: clickableWhenHasChildren.value,\r\n    shortcut: shortcut.value,\r\n    theme: options.value.theme,\r\n    isOpen: showSubMenu,\r\n    hasChildren: hasChildren,\r\n    onClick,\r\n    onMouseEnter,\r\n    closeMenu: globalCloseMenu,\r\n  }\r\n}\r\n\r\ndefineExpose(menuItemInstance);\r\n</script>\r\n\r\n<style>\r\n</style>\r\n","<template>\r\n  <VNodeRender v-if=\"globalHasSlot('separatorRender')\" :vnode=\"() => globalRenderSlot('separatorRender', {})\" />\r\n  <div v-else class=\"mx-context-menu-item-sperator mx-context-no-clickable\"></div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject } from 'vue'\r\nimport { VNodeRender } from './ContextMenuUtils';\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextSubMenuWrapper.vue';\r\n\r\nexport default defineComponent({\r\n  name: 'ContextMenuSperator',\r\n  components: {\r\n    VNodeRender\r\n  },\r\n  setup() {\r\n      \r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    return {\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n    };\r\n  },\r\n})\r\n</script>","<template>\r\n  <VNodeRender v-if=\"globalHasSlot('separatorRender')\" :vnode=\"() => globalRenderSlot('separatorRender', {})\" />\r\n  <div v-else class=\"mx-context-menu-item-sperator mx-context-no-clickable\"></div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject } from 'vue'\r\nimport { VNodeRender } from './ContextMenuUtils';\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextSubMenuWrapper.vue';\r\n\r\nexport default defineComponent({\r\n  name: 'ContextMenuSperator',\r\n  components: {\r\n    VNodeRender\r\n  },\r\n  setup() {\r\n      \r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    return {\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n    };\r\n  },\r\n})\r\n</script>","<template>\r\n  <div\r\n    ref=\"submenuRoot\"\r\n    :class=\"[\r\n      'mx-context-menu',\r\n      (options.customClass ? options.customClass : ''),\r\n      (options.theme ?? '')\r\n    ]\"\r\n    :style=\"{\r\n      maxWidth: (maxWidth ? solveNumberOrStringSize(maxWidth) : `${constOptions.defaultMaxWidth}px`),\r\n      minWidth: minWidth ? solveNumberOrStringSize(minWidth) : `${constOptions.defaultMinWidth}px`,\r\n      maxHeight: overflow && maxHeight > 0 ? `${maxHeight}px` : undefined,\r\n      zIndex: zIndex,\r\n      left: `${position.x}px`,\r\n      top: `${position.y}px`,\r\n    }\"\r\n    data-type=\"ContextSubMenu\"\r\n    @click=\"onSubMenuBodyClick\"\r\n    @wheel=\"onMouseWhell\"\r\n  >\r\n    <!--Child menu items-->\r\n    <div\r\n      :class=\"[ 'mx-context-menu-items' ]\"\r\n      ref=\"menu\"\r\n      :style=\"{\r\n        top: `${scrollValue}px`,\r\n      }\"\r\n    >\r\n      <slot>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n        <template v-for=\"(item, i) in items\" :key=\"i\" >\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'up'\" />\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'self'\" />\r\n          <!--Menu Item-->\r\n          <ContextMenuItem\r\n            v-else\r\n            :clickHandler=\"item.onClick ? (e) => item.onClick!(e) : undefined\"\r\n            :disabled=\"typeof item.disabled === 'object' ? item.disabled.value : item.disabled\"\r\n            :hidden=\"typeof item.hidden === 'object' ? item.hidden.value : item.hidden\"\r\n            :icon=\"item.icon\"\r\n            :iconFontClass=\"item.iconFontClass\"\r\n            :svgIcon=\"item.svgIcon\"\r\n            :svgProps=\"item.svgProps\"\r\n            :label=\"item.label\"\r\n            :customRender=\"(item.customRender as Function)\"\r\n            :customClass=\"item.customClass\"\r\n            :checked=\"typeof item.checked === 'object' ? item.checked.value : item.checked\"\r\n            :shortcut=\"item.shortcut\"\r\n            :clickClose=\"item.clickClose\"\r\n            :clickableWhenHasChildren=\"item.clickableWhenHasChildren\"\r\n            :preserveIconWidth=\"item.preserveIconWidth !== undefined ? item.preserveIconWidth : options.preserveIconWidth\"\r\n            :showRightArrow=\"item.children && item.children.length > 0\"\r\n            :hasChildren=\"item.children && item.children.length > 0\"\r\n            :rawMenuItem=\"item\"\r\n            @sub-menu-open=\"(v: any) => item.onSubMenuOpen?.(v)\"\r\n            @sub-menu-close=\"(v: any) => item.onSubMenuClose?.(v)\"\r\n          >\r\n            <template v-if=\"item.children && item.children.length > 0\" #submenu>\r\n              <!--Sub menu-->\r\n              <ContextSubMenu\r\n                :items=\"item.children\"\r\n                :maxWidth=\"item.maxWidth\"\r\n                :minWidth=\"item.minWidth\"\r\n                :adjustPosition=\"item.adjustSubMenuPosition !== undefined ? item.adjustSubMenuPosition : options.adjustPosition\"\r\n                :direction=\"item.direction !== undefined ? item.direction : options.direction\"\r\n              />\r\n            </template>\r\n          </ContextMenuItem>\r\n          <!--Separator-->\r\n          <!--Custom render-->\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && (item.divided === 'down' || item.divided === true)\" />\r\n        </template>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n      </slot>\r\n    </div>\r\n\r\n    <!--Scroll button host-->\r\n    <div\r\n      class=\"mx-context-menu-scroll\"\r\n      ref=\"scroll\"\r\n    >\r\n      <!--Updown scroll button-->\r\n      <div\r\n        v-show=\"overflow\"\r\n        ref=\"upScrollButton\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable up' + (overflow && scrollValue < 0 ? '' : ' disabled')\"\r\n        @click=\"onScroll(false)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n      <div\r\n        v-show=\"overflow\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable down' + (overflow && scrollValue > -scrollHeight ? '' : ' disabled')\"\r\n        @click=\"onScroll(true)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject, nextTick, onMounted, type PropType, provide, ref, toRefs, type Ref, onBeforeUnmount, type ComputedRef } from 'vue'\r\nimport type { MenuOptions, MenuItem, ContextMenuPositionData, MenuPopDirection, MenuItemContext, ContextSubMenuInstance } from './ContextMenuDefine'\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextMenu.vue'\r\nimport { MenuConstOptions } from './ContextMenuDefine'\r\nimport { getLeft, getTop, solveNumberOrStringSize } from './ContextMenuUtils'\r\nimport ContextMenuItem from './ContextMenuItem.vue'\r\nimport ContextMenuSeparator from './ContextMenuSeparator.vue'\r\nimport ContextMenuIconRight from './ContextMenuIconRight.vue'\r\n\r\n\r\n//The internal info context for submenu instance\r\nexport interface SubMenuContext {\r\n  isTopLevel: () => boolean;\r\n  closeSelfAndActiveParent: () => boolean,\r\n  openCurrentItemSubMenu: () => boolean,\r\n  closeCurrentSubMenu: () => void,\r\n  moveCurrentItemFirst: () => void,\r\n  moveCurrentItemLast: () => void,\r\n  moveCurrentItemDown: () => void,\r\n  moveCurrentItemUp: () => void,\r\n  focusCurrentItem: () => void,\r\n  triggerCurrentItemClick: (e: KeyboardEvent|MouseEvent) => void,\r\n}\r\n\r\n//The internal info context for submenu\r\nexport interface SubMenuParentContext {\r\n  //Props\r\n  container: HTMLElement;\r\n  zIndex: number;\r\n  adjustPadding: { x: number, y: number },\r\n\r\n  //Position control\r\n  getParentWidth: () => number;\r\n  getParentHeight: () => number;\r\n  getParentX: () => number;\r\n  getParentY: () => number;\r\n  getParentAbsX: () => number;\r\n  getParentAbsY: () => number;\r\n  getPositon: () => [number,number];\r\n  getZoom: () => number;\r\n\r\n  //SubMenu mutex\r\n  addOpenedSubMenu: (closeFn: () => void) => void;\r\n  closeOtherSubMenu: () => void;\r\n  closeOtherSubMenuWithTimeOut: () => void;\r\n  checkCloseOtherSubMenuTimeOut: () => boolean;\r\n\r\n  //Item control\r\n  addChildMenuItem: (item: MenuItemContext, index?: number) => void;\r\n  removeChildMenuItem: (item: MenuItemContext) => void;\r\n  markActiveMenuItem: (item: MenuItemContext, updateState?: boolean) => void;\r\n  markThisOpenedByKeyBoard: () => void;\r\n  isOpenedByKeyBoardFlag: () => boolean;\r\n  isMenuItemDataCollectedFlag: () => boolean;\r\n\r\n  //Other\r\n  getSubMenuInstanceContext: () => SubMenuContext|null;\r\n  getParentContext: () => SubMenuParentContext|null;\r\n  getElement: () => HTMLElement|null;\r\n}\r\n\r\n/**\r\n * Submenu container\r\n */\r\nexport default defineComponent({\r\n  name: 'ContextSubMenu',\r\n  components: {\r\n    ContextMenuItem,\r\n    ContextMenuSeparator,\r\n    ContextMenuIconRight\r\n  },\r\n  props: {\r\n    /**\r\n     * Items from options\r\n     */\r\n    items: {\r\n      type: Object as PropType<Array<MenuItem>>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Max width for this submenu\r\n     */\r\n    maxWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Min width for this submenu\r\n     */\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Specifies should submenu adjust it position\r\n     * when the menu exceeds the screen. The default is true\r\n     */\r\n    adjustPosition: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /**\r\n     * Menu direction\r\n     */\r\n    direction: {\r\n      type: String as PropType<MenuPopDirection>,\r\n      default: 'br',\r\n    },\r\n  },\r\n  setup(props) {\r\n\r\n    //#region Injects\r\n\r\n    const parentContext = inject('menuContext') as SubMenuParentContext;\r\n    const options = inject('globalOptions') as Ref<MenuOptions>;\r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    //#endregion\r\n\r\n    const { zIndex, getParentWidth, getParentHeight, getZoom } = parentContext;\r\n    const { adjustPosition } = toRefs(props);\r\n\r\n    const submenuRoot = ref<HTMLElement>();\r\n    const menu = ref<HTMLElement>();\r\n    const scroll = ref<HTMLElement>();\r\n    const upScrollButton = ref<HTMLElement>();\r\n    const openedSubMenuClose = [] as (() => void)[];\r\n\r\n    //#region Keyboard control context\r\n\r\n    const globalSetCurrentSubMenu = inject('globalSetCurrentSubMenu') as (menu: SubMenuContext|null) => void;\r\n\r\n    const menuItems = [] as MenuItemContext[];\r\n    let currentItem = null as MenuItemContext|null;\r\n    let leaveTimeout = 0;\r\n\r\n    function blurCurrentMenu() {\r\n      if (currentItem)\r\n        currentItem.blur();\r\n    }\r\n\r\n    function setAndFocusNotDisableItem(isDown: boolean, startIndex?: number) {\r\n      if (isDown) {\r\n        for(let i = startIndex !== undefined ? startIndex : 0; i < menuItems.length; i++) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for(let i = startIndex !== undefined ? startIndex : (menuItems.length - 1); i >= 0; i--) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    function setAndFocusCurrentMenu(index?: number) {\r\n      if (currentItem)\r\n        blurCurrentMenu();\r\n      if (index !== undefined)\r\n        currentItem = menuItems[Math.max(0, Math.min(index, menuItems.length - 1))];\r\n      if (!currentItem)\r\n        return;\r\n\r\n      //Focus item\r\n      currentItem.focus();\r\n\r\n      //Scroll to current item\r\n      if (overflow.value) {\r\n        const element = currentItem.getElement();\r\n        if (element) {\r\n          scrollValue.value = Math.min(Math.max(-scrollHeight.value, -element.offsetTop - element.offsetHeight + maxHeight.value), 0);\r\n        }\r\n      }\r\n    }\r\n    function onSubMenuBodyClick() {\r\n      //Mouse click can set current focused submenu\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n    }\r\n\r\n    const thisMenuInsContext : SubMenuContext = {\r\n      isTopLevel: () => parentContext.getParentContext() === null,\r\n      closeSelfAndActiveParent: () => {\r\n        const parent = thisMenuContext.getParentContext();\r\n        if (parent) {\r\n          parent.closeOtherSubMenu();\r\n          const conext = parent.getSubMenuInstanceContext()\r\n          if (conext) {\r\n            conext.focusCurrentItem();\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      closeCurrentSubMenu: () => thisMenuContext.getParentContext()?.closeOtherSubMenu(),\r\n      moveCurrentItemFirst: () => setAndFocusNotDisableItem(true),\r\n      moveCurrentItemLast: () => setAndFocusNotDisableItem(false),\r\n      moveCurrentItemDown: () => setAndFocusNotDisableItem(true, (currentItem ? (menuItems.indexOf(currentItem) + 1) : 0)),\r\n      moveCurrentItemUp: () => setAndFocusNotDisableItem(false, (currentItem ? (menuItems.indexOf(currentItem) - 1) : 0)),\r\n      focusCurrentItem: () => setAndFocusCurrentMenu(),\r\n      openCurrentItemSubMenu: () => {\r\n        if (currentItem)\r\n          return currentItem?.showSubMenu()\r\n        return false;\r\n      },\r\n      triggerCurrentItemClick: (e) => currentItem?.click(e),\r\n    };\r\n\r\n    let isOpenedByKeyBoardFlag = false;\r\n    let isMenuItemDataCollectedFlag = false;\r\n\r\n    //#endregion\r\n\r\n    //#region Menu control context\r\n\r\n    //provide menuContext for child use\r\n    const thisMenuContext : SubMenuParentContext = {\r\n      zIndex: zIndex + 1,\r\n      container: parentContext.container,\r\n      adjustPadding: options.value.adjustPadding as { x: number, y: number } || MenuConstOptions.defaultAdjustPadding,\r\n      getParentWidth: () => menu.value?.offsetWidth || 0,\r\n      getParentHeight: () => menu.value?.offsetHeight || 0,\r\n      getParentX: () => position.value.x,\r\n      getParentY: () => position.value.y,\r\n      getParentAbsX: () => menu.value ? getLeft(menu.value, parentContext.container) : 0,\r\n      getParentAbsY: () => menu.value ? getTop(menu.value, parentContext.container) : 0,\r\n      getPositon: () => [0,0],\r\n      getZoom: () => options.value.zoom||MenuConstOptions.defaultZoom,\r\n      addOpenedSubMenu(closeFn: () => void) {\r\n        openedSubMenuClose.push(closeFn);\r\n      },\r\n      closeOtherSubMenu() {\r\n        openedSubMenuClose.forEach(k => k());\r\n        openedSubMenuClose.splice(0, openedSubMenuClose.length);\r\n        globalSetCurrentSubMenu(thisMenuInsContext);\r\n      },\r\n      checkCloseOtherSubMenuTimeOut() {\r\n        if (leaveTimeout) {\r\n          clearTimeout(leaveTimeout);\r\n          leaveTimeout = 0;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      closeOtherSubMenuWithTimeOut() {\r\n        leaveTimeout = setTimeout(() => {\r\n          leaveTimeout = 0;\r\n          this.closeOtherSubMenu();\r\n        }, 200) as unknown as number; //Add a delay, the user will not hide the menu when moving too fast\r\n      },\r\n      addChildMenuItem: (item: MenuItemContext, index?: number) => {\r\n        if (index === undefined)\r\n          menuItems.push(item);\r\n        else\r\n          menuItems.splice(index, 0, item);\r\n        //item.getSubMenuInstance = () => {\r\n        //  return subMenuRefs.value[menuItems.indexOf(item)]?.value;\r\n        //}\r\n      },\r\n      removeChildMenuItem: (item: MenuItemContext) => {\r\n        menuItems.splice(menuItems.indexOf(item), 1);\r\n        item.getSubMenuInstance = () => undefined;\r\n      },\r\n      markActiveMenuItem: (item: MenuItemContext, updateState = false) => {\r\n        blurCurrentMenu();\r\n        currentItem = item;\r\n        if (updateState)\r\n          setAndFocusCurrentMenu();\r\n      },\r\n      markThisOpenedByKeyBoard: () => {\r\n        isOpenedByKeyBoardFlag = true;\r\n      },\r\n      isOpenedByKeyBoardFlag: () => {\r\n        if (isOpenedByKeyBoardFlag) {\r\n          isOpenedByKeyBoardFlag = false;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      isMenuItemDataCollectedFlag: () => isMenuItemDataCollectedFlag,\r\n      getElement: () => menu.value || null,\r\n      getParentContext: () => parentContext,\r\n      getSubMenuInstanceContext: () => thisMenuInsContext,\r\n    };\r\n    provide('menuContext', thisMenuContext);\r\n\r\n    //#endregion\r\n\r\n    //#region expose user use context\r\n\r\n    const exposeContext : ContextSubMenuInstance = {\r\n      getChildItem: (index: number) => menuItems[index],\r\n      getMenuDimensions: () => {\r\n        if (submenuRoot.value) {\r\n          return {\r\n            width: submenuRoot.value.offsetWidth,\r\n            height: submenuRoot.value.offsetHeight,\r\n          };\r\n        }\r\n        return { width: 0, height: 0 };\r\n      },\r\n      getSubmenuRoot: () => submenuRoot.value,\r\n      getMenu: () => menu.value,\r\n      getScrollValue: () => scrollValue.value,\r\n      setScrollValue: (v: number) => scrollValue.value = v,\r\n      getScrollHeight: () => scrollHeight.value,\r\n      getMaxHeight: () => maxHeight.value,\r\n      getPosition: () => position.value,\r\n      setPosition: (x: number, y: number) => { \r\n        position.value.x = x;\r\n        position.value.y = y;\r\n      },\r\n    };\r\n    \r\n    //#endregion\r\n\r\n    //#region set parent item context\r\n\r\n    const menuItemInstance = inject<MenuItemContext|undefined>('menuItemInstance', undefined);\r\n    if (menuItemInstance)\r\n      menuItemInstance.getSubMenuInstance = () => exposeContext;\r\n\r\n    //#endregion\r\n\r\n    const scrollValue = ref(0);\r\n    const scrollHeight = ref(0);\r\n\r\n    //Scroll the items\r\n    function onScroll(down : boolean) {\r\n      if (down)\r\n        scrollValue.value = Math.min(Math.max(scrollValue.value - 50, -scrollHeight.value), 0);\r\n      else\r\n        scrollValue.value = Math.min(scrollValue.value + 50, 0);\r\n    }\r\n\r\n    function onMouseWhellMx(e: WheelEvent) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      onScroll (e.deltaY > 0);\r\n    }\r\n    function onMouseWhell(e: WheelEvent) {\r\n      if (options.value.mouseScroll) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onScroll (e.deltaY > 0);\r\n      }\r\n    }\r\n\r\n    const overflow = ref(false);\r\n    const position = ref({ x: 0, y: 0 } as ContextMenuPositionData)\r\n    const maxHeight = ref(0);\r\n\r\n    onMounted(() => {\r\n      const pos = parentContext.getPositon();\r\n      position.value = {\r\n        x: (pos[0] ?? options.value.xOffset ?? 0) / getZoom(),\r\n        y: (pos[1] ?? options.value.yOffset ?? 0) / getZoom(),\r\n      };\r\n\r\n      //Mark current item submenu is open\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n\r\n      nextTick(() => {\r\n        const menuEl = menu.value;\r\n\r\n        //adjust submenu position\r\n        if (menuEl && scroll.value) {\r\n\r\n          const { container } = parentContext;\r\n\r\n          const parentWidth = getParentWidth?.() ?? 0;\r\n          const parentHeight = getParentHeight?.() ?? 0;\r\n\r\n          const fillPaddingX = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.x ?? 0);\r\n          const fillPaddingYAlways = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.y ?? 0);\r\n          const fillPaddingY = parentHeight > 0 ? fillPaddingYAlways : 0;\r\n\r\n          const windowHeight = document.documentElement.scrollHeight / getZoom();\r\n          const windowWidth = document.documentElement.scrollWidth / getZoom();\r\n\r\n          const avliableWidth = Math.min(windowWidth, container.offsetWidth);\r\n          const avliableHeight = Math.min(windowHeight, container.offsetHeight);\r\n\r\n          let absX = getLeft(menuEl, container),\r\n            absY = getTop(menuEl, container);\r\n\r\n          //set x positon\r\n          if (props.direction.includes('l')) {\r\n            position.value.x -= menuEl.offsetWidth + fillPaddingX; //left\r\n          }\r\n          else if (props.direction.includes('r')) {\r\n            position.value.x += parentWidth + fillPaddingX; //right\r\n          }\r\n          else {\r\n            position.value.x += parentWidth / 2;\r\n            position.value.x -= (menuEl.offsetWidth + fillPaddingX) / 2; //center\r\n          }\r\n\r\n          //set y positon\r\n          if (props.direction.includes('t')) {\r\n            position.value.y -= (menuEl.offsetHeight + fillPaddingYAlways * 2) / getZoom(); //top\r\n          }\r\n          else if (props.direction.includes('b')) {\r\n            position.value.y -= fillPaddingYAlways / getZoom();  //bottom\r\n          }\r\n          else {\r\n            position.value.y += (parentHeight / 2) / getZoom();\r\n            position.value.y -= ((menuEl.offsetHeight + fillPaddingYAlways) / 2) / getZoom(); //center\r\n          }\r\n\r\n          //Overflow adjust\r\n          if (adjustPosition.value) {\r\n            nextTick(() => {\r\n              absX = getLeft(menuEl, container);\r\n              absY = getTop(menuEl, container);\r\n\r\n              const xOverflow = (absX + menuEl.offsetWidth) - (avliableWidth);\r\n              const yOverflow = (absY + menuEl.offsetHeight + fillPaddingY * 2) - (avliableHeight);\r\n\r\n              overflow.value = yOverflow > 0;\r\n              scrollHeight.value = menuEl.offsetHeight - avliableHeight + fillPaddingY * 2 /* Padding */;\r\n\r\n              if (xOverflow > 0) {//X overflow\r\n                const ox = parentWidth + menuEl.offsetWidth - fillPaddingX;\r\n                const maxSubWidth = absX;\r\n                if (ox > maxSubWidth)\r\n                  position.value.x -= maxSubWidth;\r\n                else\r\n                  position.value.x -= ox;\r\n              }\r\n\r\n              if (overflow.value) { //Y overflow\r\n                const oy = yOverflow;\r\n                const maxSubHeight = absY;\r\n                if (oy > maxSubHeight)\r\n                  position.value.y -= maxSubHeight - fillPaddingY;\r\n                else\r\n                  position.value.y -= oy - fillPaddingY;\r\n                maxHeight.value = (avliableHeight - fillPaddingY * 2);\r\n              } else {\r\n                maxHeight.value = 0;\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        //Focus this submenu\r\n        menuEl?.focus({\r\n          preventScroll: true\r\n        });\r\n\r\n        //Is this submenu opened by keyboard? If yes then select first item\r\n        if (parentContext.isOpenedByKeyBoardFlag())\r\n          setAndFocusNotDisableItem(true);\r\n\r\n        isMenuItemDataCollectedFlag = true;\r\n      });\r\n    });\r\n    onBeforeUnmount(() => {\r\n      if (menuItemInstance)\r\n        menuItemInstance.getSubMenuInstance = () => undefined;\r\n    });\r\n\r\n    return {\r\n      submenuRoot,\r\n      menu,\r\n      scroll,\r\n      options,\r\n      zIndex,\r\n      constOptions: MenuConstOptions,\r\n      scrollValue,\r\n      upScrollButton,\r\n      overflow,\r\n      position,\r\n      scrollHeight,\r\n      maxHeight,\r\n      ...exposeContext,\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n      onScroll,\r\n      onSubMenuBodyClick,\r\n      onMouseWhell,\r\n      onMouseWhellMx,\r\n      solveNumberOrStringSize,\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"./ContextMenu.scss\";\r\n</style>\r\n","<template>\r\n  <div\r\n    ref=\"submenuRoot\"\r\n    :class=\"[\r\n      'mx-context-menu',\r\n      (options.customClass ? options.customClass : ''),\r\n      (options.theme ?? '')\r\n    ]\"\r\n    :style=\"{\r\n      maxWidth: (maxWidth ? solveNumberOrStringSize(maxWidth) : `${constOptions.defaultMaxWidth}px`),\r\n      minWidth: minWidth ? solveNumberOrStringSize(minWidth) : `${constOptions.defaultMinWidth}px`,\r\n      maxHeight: overflow && maxHeight > 0 ? `${maxHeight}px` : undefined,\r\n      zIndex: zIndex,\r\n      left: `${position.x}px`,\r\n      top: `${position.y}px`,\r\n    }\"\r\n    data-type=\"ContextSubMenu\"\r\n    @click=\"onSubMenuBodyClick\"\r\n    @wheel=\"onMouseWhell\"\r\n  >\r\n    <!--Child menu items-->\r\n    <div\r\n      :class=\"[ 'mx-context-menu-items' ]\"\r\n      ref=\"menu\"\r\n      :style=\"{\r\n        top: `${scrollValue}px`,\r\n      }\"\r\n    >\r\n      <slot>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n        <template v-for=\"(item, i) in items\" :key=\"i\" >\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'up'\" />\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'self'\" />\r\n          <!--Menu Item-->\r\n          <ContextMenuItem\r\n            v-else\r\n            :clickHandler=\"item.onClick ? (e) => item.onClick!(e) : undefined\"\r\n            :disabled=\"typeof item.disabled === 'object' ? item.disabled.value : item.disabled\"\r\n            :hidden=\"typeof item.hidden === 'object' ? item.hidden.value : item.hidden\"\r\n            :icon=\"item.icon\"\r\n            :iconFontClass=\"item.iconFontClass\"\r\n            :svgIcon=\"item.svgIcon\"\r\n            :svgProps=\"item.svgProps\"\r\n            :label=\"item.label\"\r\n            :customRender=\"(item.customRender as Function)\"\r\n            :customClass=\"item.customClass\"\r\n            :checked=\"typeof item.checked === 'object' ? item.checked.value : item.checked\"\r\n            :shortcut=\"item.shortcut\"\r\n            :clickClose=\"item.clickClose\"\r\n            :clickableWhenHasChildren=\"item.clickableWhenHasChildren\"\r\n            :preserveIconWidth=\"item.preserveIconWidth !== undefined ? item.preserveIconWidth : options.preserveIconWidth\"\r\n            :showRightArrow=\"item.children && item.children.length > 0\"\r\n            :hasChildren=\"item.children && item.children.length > 0\"\r\n            :rawMenuItem=\"item\"\r\n            @sub-menu-open=\"(v: any) => item.onSubMenuOpen?.(v)\"\r\n            @sub-menu-close=\"(v: any) => item.onSubMenuClose?.(v)\"\r\n          >\r\n            <template v-if=\"item.children && item.children.length > 0\" #submenu>\r\n              <!--Sub menu-->\r\n              <ContextSubMenu\r\n                :items=\"item.children\"\r\n                :maxWidth=\"item.maxWidth\"\r\n                :minWidth=\"item.minWidth\"\r\n                :adjustPosition=\"item.adjustSubMenuPosition !== undefined ? item.adjustSubMenuPosition : options.adjustPosition\"\r\n                :direction=\"item.direction !== undefined ? item.direction : options.direction\"\r\n              />\r\n            </template>\r\n          </ContextMenuItem>\r\n          <!--Separator-->\r\n          <!--Custom render-->\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && (item.divided === 'down' || item.divided === true)\" />\r\n        </template>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n      </slot>\r\n    </div>\r\n\r\n    <!--Scroll button host-->\r\n    <div\r\n      class=\"mx-context-menu-scroll\"\r\n      ref=\"scroll\"\r\n    >\r\n      <!--Updown scroll button-->\r\n      <div\r\n        v-show=\"overflow\"\r\n        ref=\"upScrollButton\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable up' + (overflow && scrollValue < 0 ? '' : ' disabled')\"\r\n        @click=\"onScroll(false)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n      <div\r\n        v-show=\"overflow\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable down' + (overflow && scrollValue > -scrollHeight ? '' : ' disabled')\"\r\n        @click=\"onScroll(true)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject, nextTick, onMounted, type PropType, provide, ref, toRefs, type Ref, onBeforeUnmount, type ComputedRef } from 'vue'\r\nimport type { MenuOptions, MenuItem, ContextMenuPositionData, MenuPopDirection, MenuItemContext, ContextSubMenuInstance } from './ContextMenuDefine'\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextMenu.vue'\r\nimport { MenuConstOptions } from './ContextMenuDefine'\r\nimport { getLeft, getTop, solveNumberOrStringSize } from './ContextMenuUtils'\r\nimport ContextMenuItem from './ContextMenuItem.vue'\r\nimport ContextMenuSeparator from './ContextMenuSeparator.vue'\r\nimport ContextMenuIconRight from './ContextMenuIconRight.vue'\r\n\r\n\r\n//The internal info context for submenu instance\r\nexport interface SubMenuContext {\r\n  isTopLevel: () => boolean;\r\n  closeSelfAndActiveParent: () => boolean,\r\n  openCurrentItemSubMenu: () => boolean,\r\n  closeCurrentSubMenu: () => void,\r\n  moveCurrentItemFirst: () => void,\r\n  moveCurrentItemLast: () => void,\r\n  moveCurrentItemDown: () => void,\r\n  moveCurrentItemUp: () => void,\r\n  focusCurrentItem: () => void,\r\n  triggerCurrentItemClick: (e: KeyboardEvent|MouseEvent) => void,\r\n}\r\n\r\n//The internal info context for submenu\r\nexport interface SubMenuParentContext {\r\n  //Props\r\n  container: HTMLElement;\r\n  zIndex: number;\r\n  adjustPadding: { x: number, y: number },\r\n\r\n  //Position control\r\n  getParentWidth: () => number;\r\n  getParentHeight: () => number;\r\n  getParentX: () => number;\r\n  getParentY: () => number;\r\n  getParentAbsX: () => number;\r\n  getParentAbsY: () => number;\r\n  getPositon: () => [number,number];\r\n  getZoom: () => number;\r\n\r\n  //SubMenu mutex\r\n  addOpenedSubMenu: (closeFn: () => void) => void;\r\n  closeOtherSubMenu: () => void;\r\n  closeOtherSubMenuWithTimeOut: () => void;\r\n  checkCloseOtherSubMenuTimeOut: () => boolean;\r\n\r\n  //Item control\r\n  addChildMenuItem: (item: MenuItemContext, index?: number) => void;\r\n  removeChildMenuItem: (item: MenuItemContext) => void;\r\n  markActiveMenuItem: (item: MenuItemContext, updateState?: boolean) => void;\r\n  markThisOpenedByKeyBoard: () => void;\r\n  isOpenedByKeyBoardFlag: () => boolean;\r\n  isMenuItemDataCollectedFlag: () => boolean;\r\n\r\n  //Other\r\n  getSubMenuInstanceContext: () => SubMenuContext|null;\r\n  getParentContext: () => SubMenuParentContext|null;\r\n  getElement: () => HTMLElement|null;\r\n}\r\n\r\n/**\r\n * Submenu container\r\n */\r\nexport default defineComponent({\r\n  name: 'ContextSubMenu',\r\n  components: {\r\n    ContextMenuItem,\r\n    ContextMenuSeparator,\r\n    ContextMenuIconRight\r\n  },\r\n  props: {\r\n    /**\r\n     * Items from options\r\n     */\r\n    items: {\r\n      type: Object as PropType<Array<MenuItem>>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Max width for this submenu\r\n     */\r\n    maxWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Min width for this submenu\r\n     */\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Specifies should submenu adjust it position\r\n     * when the menu exceeds the screen. The default is true\r\n     */\r\n    adjustPosition: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /**\r\n     * Menu direction\r\n     */\r\n    direction: {\r\n      type: String as PropType<MenuPopDirection>,\r\n      default: 'br',\r\n    },\r\n  },\r\n  setup(props) {\r\n\r\n    //#region Injects\r\n\r\n    const parentContext = inject('menuContext') as SubMenuParentContext;\r\n    const options = inject('globalOptions') as Ref<MenuOptions>;\r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    //#endregion\r\n\r\n    const { zIndex, getParentWidth, getParentHeight, getZoom } = parentContext;\r\n    const { adjustPosition } = toRefs(props);\r\n\r\n    const submenuRoot = ref<HTMLElement>();\r\n    const menu = ref<HTMLElement>();\r\n    const scroll = ref<HTMLElement>();\r\n    const upScrollButton = ref<HTMLElement>();\r\n    const openedSubMenuClose = [] as (() => void)[];\r\n\r\n    //#region Keyboard control context\r\n\r\n    const globalSetCurrentSubMenu = inject('globalSetCurrentSubMenu') as (menu: SubMenuContext|null) => void;\r\n\r\n    const menuItems = [] as MenuItemContext[];\r\n    let currentItem = null as MenuItemContext|null;\r\n    let leaveTimeout = 0;\r\n\r\n    function blurCurrentMenu() {\r\n      if (currentItem)\r\n        currentItem.blur();\r\n    }\r\n\r\n    function setAndFocusNotDisableItem(isDown: boolean, startIndex?: number) {\r\n      if (isDown) {\r\n        for(let i = startIndex !== undefined ? startIndex : 0; i < menuItems.length; i++) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for(let i = startIndex !== undefined ? startIndex : (menuItems.length - 1); i >= 0; i--) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    function setAndFocusCurrentMenu(index?: number) {\r\n      if (currentItem)\r\n        blurCurrentMenu();\r\n      if (index !== undefined)\r\n        currentItem = menuItems[Math.max(0, Math.min(index, menuItems.length - 1))];\r\n      if (!currentItem)\r\n        return;\r\n\r\n      //Focus item\r\n      currentItem.focus();\r\n\r\n      //Scroll to current item\r\n      if (overflow.value) {\r\n        const element = currentItem.getElement();\r\n        if (element) {\r\n          scrollValue.value = Math.min(Math.max(-scrollHeight.value, -element.offsetTop - element.offsetHeight + maxHeight.value), 0);\r\n        }\r\n      }\r\n    }\r\n    function onSubMenuBodyClick() {\r\n      //Mouse click can set current focused submenu\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n    }\r\n\r\n    const thisMenuInsContext : SubMenuContext = {\r\n      isTopLevel: () => parentContext.getParentContext() === null,\r\n      closeSelfAndActiveParent: () => {\r\n        const parent = thisMenuContext.getParentContext();\r\n        if (parent) {\r\n          parent.closeOtherSubMenu();\r\n          const conext = parent.getSubMenuInstanceContext()\r\n          if (conext) {\r\n            conext.focusCurrentItem();\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      closeCurrentSubMenu: () => thisMenuContext.getParentContext()?.closeOtherSubMenu(),\r\n      moveCurrentItemFirst: () => setAndFocusNotDisableItem(true),\r\n      moveCurrentItemLast: () => setAndFocusNotDisableItem(false),\r\n      moveCurrentItemDown: () => setAndFocusNotDisableItem(true, (currentItem ? (menuItems.indexOf(currentItem) + 1) : 0)),\r\n      moveCurrentItemUp: () => setAndFocusNotDisableItem(false, (currentItem ? (menuItems.indexOf(currentItem) - 1) : 0)),\r\n      focusCurrentItem: () => setAndFocusCurrentMenu(),\r\n      openCurrentItemSubMenu: () => {\r\n        if (currentItem)\r\n          return currentItem?.showSubMenu()\r\n        return false;\r\n      },\r\n      triggerCurrentItemClick: (e) => currentItem?.click(e),\r\n    };\r\n\r\n    let isOpenedByKeyBoardFlag = false;\r\n    let isMenuItemDataCollectedFlag = false;\r\n\r\n    //#endregion\r\n\r\n    //#region Menu control context\r\n\r\n    //provide menuContext for child use\r\n    const thisMenuContext : SubMenuParentContext = {\r\n      zIndex: zIndex + 1,\r\n      container: parentContext.container,\r\n      adjustPadding: options.value.adjustPadding as { x: number, y: number } || MenuConstOptions.defaultAdjustPadding,\r\n      getParentWidth: () => menu.value?.offsetWidth || 0,\r\n      getParentHeight: () => menu.value?.offsetHeight || 0,\r\n      getParentX: () => position.value.x,\r\n      getParentY: () => position.value.y,\r\n      getParentAbsX: () => menu.value ? getLeft(menu.value, parentContext.container) : 0,\r\n      getParentAbsY: () => menu.value ? getTop(menu.value, parentContext.container) : 0,\r\n      getPositon: () => [0,0],\r\n      getZoom: () => options.value.zoom||MenuConstOptions.defaultZoom,\r\n      addOpenedSubMenu(closeFn: () => void) {\r\n        openedSubMenuClose.push(closeFn);\r\n      },\r\n      closeOtherSubMenu() {\r\n        openedSubMenuClose.forEach(k => k());\r\n        openedSubMenuClose.splice(0, openedSubMenuClose.length);\r\n        globalSetCurrentSubMenu(thisMenuInsContext);\r\n      },\r\n      checkCloseOtherSubMenuTimeOut() {\r\n        if (leaveTimeout) {\r\n          clearTimeout(leaveTimeout);\r\n          leaveTimeout = 0;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      closeOtherSubMenuWithTimeOut() {\r\n        leaveTimeout = setTimeout(() => {\r\n          leaveTimeout = 0;\r\n          this.closeOtherSubMenu();\r\n        }, 200) as unknown as number; //Add a delay, the user will not hide the menu when moving too fast\r\n      },\r\n      addChildMenuItem: (item: MenuItemContext, index?: number) => {\r\n        if (index === undefined)\r\n          menuItems.push(item);\r\n        else\r\n          menuItems.splice(index, 0, item);\r\n        //item.getSubMenuInstance = () => {\r\n        //  return subMenuRefs.value[menuItems.indexOf(item)]?.value;\r\n        //}\r\n      },\r\n      removeChildMenuItem: (item: MenuItemContext) => {\r\n        menuItems.splice(menuItems.indexOf(item), 1);\r\n        item.getSubMenuInstance = () => undefined;\r\n      },\r\n      markActiveMenuItem: (item: MenuItemContext, updateState = false) => {\r\n        blurCurrentMenu();\r\n        currentItem = item;\r\n        if (updateState)\r\n          setAndFocusCurrentMenu();\r\n      },\r\n      markThisOpenedByKeyBoard: () => {\r\n        isOpenedByKeyBoardFlag = true;\r\n      },\r\n      isOpenedByKeyBoardFlag: () => {\r\n        if (isOpenedByKeyBoardFlag) {\r\n          isOpenedByKeyBoardFlag = false;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      isMenuItemDataCollectedFlag: () => isMenuItemDataCollectedFlag,\r\n      getElement: () => menu.value || null,\r\n      getParentContext: () => parentContext,\r\n      getSubMenuInstanceContext: () => thisMenuInsContext,\r\n    };\r\n    provide('menuContext', thisMenuContext);\r\n\r\n    //#endregion\r\n\r\n    //#region expose user use context\r\n\r\n    const exposeContext : ContextSubMenuInstance = {\r\n      getChildItem: (index: number) => menuItems[index],\r\n      getMenuDimensions: () => {\r\n        if (submenuRoot.value) {\r\n          return {\r\n            width: submenuRoot.value.offsetWidth,\r\n            height: submenuRoot.value.offsetHeight,\r\n          };\r\n        }\r\n        return { width: 0, height: 0 };\r\n      },\r\n      getSubmenuRoot: () => submenuRoot.value,\r\n      getMenu: () => menu.value,\r\n      getScrollValue: () => scrollValue.value,\r\n      setScrollValue: (v: number) => scrollValue.value = v,\r\n      getScrollHeight: () => scrollHeight.value,\r\n      getMaxHeight: () => maxHeight.value,\r\n      getPosition: () => position.value,\r\n      setPosition: (x: number, y: number) => { \r\n        position.value.x = x;\r\n        position.value.y = y;\r\n      },\r\n    };\r\n    \r\n    //#endregion\r\n\r\n    //#region set parent item context\r\n\r\n    const menuItemInstance = inject<MenuItemContext|undefined>('menuItemInstance', undefined);\r\n    if (menuItemInstance)\r\n      menuItemInstance.getSubMenuInstance = () => exposeContext;\r\n\r\n    //#endregion\r\n\r\n    const scrollValue = ref(0);\r\n    const scrollHeight = ref(0);\r\n\r\n    //Scroll the items\r\n    function onScroll(down : boolean) {\r\n      if (down)\r\n        scrollValue.value = Math.min(Math.max(scrollValue.value - 50, -scrollHeight.value), 0);\r\n      else\r\n        scrollValue.value = Math.min(scrollValue.value + 50, 0);\r\n    }\r\n\r\n    function onMouseWhellMx(e: WheelEvent) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      onScroll (e.deltaY > 0);\r\n    }\r\n    function onMouseWhell(e: WheelEvent) {\r\n      if (options.value.mouseScroll) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onScroll (e.deltaY > 0);\r\n      }\r\n    }\r\n\r\n    const overflow = ref(false);\r\n    const position = ref({ x: 0, y: 0 } as ContextMenuPositionData)\r\n    const maxHeight = ref(0);\r\n\r\n    onMounted(() => {\r\n      const pos = parentContext.getPositon();\r\n      position.value = {\r\n        x: (pos[0] ?? options.value.xOffset ?? 0) / getZoom(),\r\n        y: (pos[1] ?? options.value.yOffset ?? 0) / getZoom(),\r\n      };\r\n\r\n      //Mark current item submenu is open\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n\r\n      nextTick(() => {\r\n        const menuEl = menu.value;\r\n\r\n        //adjust submenu position\r\n        if (menuEl && scroll.value) {\r\n\r\n          const { container } = parentContext;\r\n\r\n          const parentWidth = getParentWidth?.() ?? 0;\r\n          const parentHeight = getParentHeight?.() ?? 0;\r\n\r\n          const fillPaddingX = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.x ?? 0);\r\n          const fillPaddingYAlways = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.y ?? 0);\r\n          const fillPaddingY = parentHeight > 0 ? fillPaddingYAlways : 0;\r\n\r\n          const windowHeight = document.documentElement.scrollHeight / getZoom();\r\n          const windowWidth = document.documentElement.scrollWidth / getZoom();\r\n\r\n          const avliableWidth = Math.min(windowWidth, container.offsetWidth);\r\n          const avliableHeight = Math.min(windowHeight, container.offsetHeight);\r\n\r\n          let absX = getLeft(menuEl, container),\r\n            absY = getTop(menuEl, container);\r\n\r\n          //set x positon\r\n          if (props.direction.includes('l')) {\r\n            position.value.x -= menuEl.offsetWidth + fillPaddingX; //left\r\n          }\r\n          else if (props.direction.includes('r')) {\r\n            position.value.x += parentWidth + fillPaddingX; //right\r\n          }\r\n          else {\r\n            position.value.x += parentWidth / 2;\r\n            position.value.x -= (menuEl.offsetWidth + fillPaddingX) / 2; //center\r\n          }\r\n\r\n          //set y positon\r\n          if (props.direction.includes('t')) {\r\n            position.value.y -= (menuEl.offsetHeight + fillPaddingYAlways * 2) / getZoom(); //top\r\n          }\r\n          else if (props.direction.includes('b')) {\r\n            position.value.y -= fillPaddingYAlways / getZoom();  //bottom\r\n          }\r\n          else {\r\n            position.value.y += (parentHeight / 2) / getZoom();\r\n            position.value.y -= ((menuEl.offsetHeight + fillPaddingYAlways) / 2) / getZoom(); //center\r\n          }\r\n\r\n          //Overflow adjust\r\n          if (adjustPosition.value) {\r\n            nextTick(() => {\r\n              absX = getLeft(menuEl, container);\r\n              absY = getTop(menuEl, container);\r\n\r\n              const xOverflow = (absX + menuEl.offsetWidth) - (avliableWidth);\r\n              const yOverflow = (absY + menuEl.offsetHeight + fillPaddingY * 2) - (avliableHeight);\r\n\r\n              overflow.value = yOverflow > 0;\r\n              scrollHeight.value = menuEl.offsetHeight - avliableHeight + fillPaddingY * 2 /* Padding */;\r\n\r\n              if (xOverflow > 0) {//X overflow\r\n                const ox = parentWidth + menuEl.offsetWidth - fillPaddingX;\r\n                const maxSubWidth = absX;\r\n                if (ox > maxSubWidth)\r\n                  position.value.x -= maxSubWidth;\r\n                else\r\n                  position.value.x -= ox;\r\n              }\r\n\r\n              if (overflow.value) { //Y overflow\r\n                const oy = yOverflow;\r\n                const maxSubHeight = absY;\r\n                if (oy > maxSubHeight)\r\n                  position.value.y -= maxSubHeight - fillPaddingY;\r\n                else\r\n                  position.value.y -= oy - fillPaddingY;\r\n                maxHeight.value = (avliableHeight - fillPaddingY * 2);\r\n              } else {\r\n                maxHeight.value = 0;\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        //Focus this submenu\r\n        menuEl?.focus({\r\n          preventScroll: true\r\n        });\r\n\r\n        //Is this submenu opened by keyboard? If yes then select first item\r\n        if (parentContext.isOpenedByKeyBoardFlag())\r\n          setAndFocusNotDisableItem(true);\r\n\r\n        isMenuItemDataCollectedFlag = true;\r\n      });\r\n    });\r\n    onBeforeUnmount(() => {\r\n      if (menuItemInstance)\r\n        menuItemInstance.getSubMenuInstance = () => undefined;\r\n    });\r\n\r\n    return {\r\n      submenuRoot,\r\n      menu,\r\n      scroll,\r\n      options,\r\n      zIndex,\r\n      constOptions: MenuConstOptions,\r\n      scrollValue,\r\n      upScrollButton,\r\n      overflow,\r\n      position,\r\n      scrollHeight,\r\n      maxHeight,\r\n      ...exposeContext,\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n      onScroll,\r\n      onSubMenuBodyClick,\r\n      onMouseWhell,\r\n      onMouseWhellMx,\r\n      solveNumberOrStringSize,\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"./ContextMenu.scss\";\r\n</style>\r\n","<template>\r\n  <div class=\"mx-menu-ghost-host\">\r\n    <Transition\r\n      v-if=\"options.menuTransitionProps\"\r\n      appear\r\n      v-bind=\"options.menuTransitionProps\"\r\n      @after-leave=\"emit('closeAnimFinished')\"\r\n    >\r\n      <ContextSubMenuConstructor\r\n        v-if=\"show\"\r\n        ref=\"submenuInstance\"\r\n        class=\"mx-menu-host\"\r\n        :items=\"options.items\"\r\n        :adjustPosition=\"options.adjustPosition\"\r\n        :maxWidth=\"options.maxWidth || MenuConstOptions.defaultMaxWidth\"\r\n        :minWidth=\"options.minWidth || MenuConstOptions.defaultMinWidth\"\r\n        :direction=\"(options.direction || MenuConstOptions.defaultDirection as MenuPopDirection)\"\r\n      >\r\n        <slot />\r\n      </ContextSubMenuConstructor>\r\n    </Transition>\r\n    <ContextSubMenuConstructor\r\n      v-else-if=\"show\"\r\n      ref=\"submenuInstance\"\r\n      class=\"mx-menu-host\"\r\n      :items=\"options.items\"\r\n      :adjustPosition=\"options.adjustPosition\"\r\n      :maxWidth=\"options.maxWidth || MenuConstOptions.defaultMaxWidth\"\r\n      :minWidth=\"options.minWidth || MenuConstOptions.defaultMinWidth\"\r\n      :direction=\"(options.direction || MenuConstOptions.defaultDirection as MenuPopDirection)\"\r\n    >\r\n      <slot />\r\n    </ContextSubMenuConstructor>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { h, onBeforeUnmount, onMounted, type PropType, provide, ref, renderSlot, toRefs, type VNode, watch, Transition, useSlots, type Ref } from 'vue'\r\nimport type { ContextMenuInstance, ContextSubMenuInstance, MenuItem, MenuOptions, MenuPopDirection } from './ContextMenuDefine'\r\nimport { MenuConstOptions } from './ContextMenuDefine'\r\nimport { addOpenedContextMenu, removeOpenedContextMenu } from './ContextMenuMutex';\r\nimport ContextSubMenuConstructor, { type SubMenuContext, type SubMenuParentContext } from './ContextSubMenu.vue';\r\n\r\n/**\r\n * Context menu component\r\n */\r\n\r\nexport type GlobalHasSlot = (name: string) => boolean;\r\nexport type GlobalRenderSlot = (name: string, params: Record<string, unknown>) => VNode;\r\n\r\nconst props = defineProps({\r\n  /**\r\n   * Menu options\r\n   */\r\n  options: {\r\n    type: Object as PropType<MenuOptions>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Show menu?\r\n   */\r\n  show: {\r\n    type: Object as PropType<Ref<boolean>>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Current container, For calculation only\r\n   */\r\n  container: {\r\n    type: Object as PropType<HTMLElement>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Make sure is user set the custom container.\r\n   */\r\n  isFullScreenContainer: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n});\r\n\r\nconst emit = defineEmits([ 'close', 'closeAnimFinished' ]);\r\n\r\nconst slots = useSlots()\r\n\r\nconst submenuInstance = ref<ContextSubMenuInstance>();\r\n\r\nconst {\r\n  options,\r\n  show,\r\n  container,\r\n} = toRefs(props);\r\n\r\nonMounted(() => {\r\n  if (show.value)\r\n    openMenu();\r\n})\r\nonBeforeUnmount(() => {\r\n  removeBodyEvents();\r\n});\r\n\r\nwatch(show, (v: boolean) => {\r\n  if(v) {\r\n    openMenu();\r\n  } else {\r\n    removeOpenedContextMenu(instance);\r\n    removeBodyEvents();\r\n  }\r\n});\r\n\r\nconst instance : ContextMenuInstance = {\r\n  closeMenu,\r\n  isClosed,\r\n  getMenuRef: () => submenuInstance.value,\r\n  getMenuDimensions: () => submenuInstance.value?.getMenuDimensions() ?? { width: 0, height: 0 },\r\n};\r\nlet closed = false;\r\n\r\nfunction openMenu() {\r\n  installBodyEvents();\r\n  addOpenedContextMenu(instance);\r\n}\r\nfunction closeMenu(fromItem?: MenuItem|undefined) {\r\n  closed = true;\r\n  emit(\"close\", fromItem);\r\n  if (!options.value.menuTransitionProps)\r\n    emit('closeAnimFinished');\r\n  removeOpenedContextMenu(instance);\r\n}\r\nfunction isClosed() {\r\n  return closed;\r\n}\r\n\r\n\r\nfunction installBodyEvents() {\r\n  setTimeout(() => {\r\n    document.addEventListener(\"click\", onBodyClick, true);\r\n    document.addEventListener(\"contextmenu\", onBodyClick, true);\r\n    document.addEventListener(\"scroll\", onBodyScroll, true);\r\n    if (!props.isFullScreenContainer && container.value)\r\n      container.value.addEventListener(\"scroll\", onBodyScroll, true);\r\n    if (options.value.keyboardControl !== false)\r\n      document.addEventListener('keydown', onMenuKeyDown);\r\n  }, 50);\r\n}\r\nfunction removeBodyEvents() {\r\n  document.removeEventListener(\"contextmenu\", onBodyClick, true);\r\n  document.removeEventListener(\"click\", onBodyClick, true);\r\n  document.removeEventListener(\"scroll\", onBodyScroll, true);\r\n  if (!props.isFullScreenContainer && container.value)\r\n    container.value.removeEventListener(\"scroll\", onBodyScroll, true);\r\n  if (options.value.keyboardControl !== false)\r\n    document.removeEventListener('keydown', onMenuKeyDown);\r\n}\r\n\r\n//For keyboard event, remember which submenu is active\r\nconst currentOpenedMenu = ref<SubMenuContext|null>();\r\nprovide('globalSetCurrentSubMenu', (menu: SubMenuContext|null) => currentOpenedMenu.value = menu);\r\n\r\nfunction onMenuKeyDown(e: KeyboardEvent) {\r\n  let handled = true;\r\n  //Handle keyboard event\r\n  switch(e.key) {\r\n    case \"Escape\": {\r\n      if (currentOpenedMenu.value?.isTopLevel() === false) {\r\n        currentOpenedMenu.value?.closeCurrentSubMenu();\r\n      } else {\r\n        closeMenu();\r\n      }\r\n      break;\r\n    }\r\n    case \"ArrowDown\":\r\n      currentOpenedMenu.value?.moveCurrentItemDown();\r\n      break;\r\n    case \"ArrowUp\":\r\n      currentOpenedMenu.value?.moveCurrentItemUp();\r\n      break;\r\n    case \"Home\":\r\n      currentOpenedMenu.value?.moveCurrentItemFirst();\r\n      break;\r\n    case \"End\":\r\n      currentOpenedMenu.value?.moveCurrentItemLast();\r\n      break;\r\n    case \"ArrowLeft\": {\r\n      if (!currentOpenedMenu.value?.closeSelfAndActiveParent())\r\n        options.value.onKeyFocusMoveLeft?.();\r\n      break;\r\n    }\r\n    case \"ArrowRight\":\r\n      if (!currentOpenedMenu.value?.openCurrentItemSubMenu())\r\n        options.value.onKeyFocusMoveRight?.();\r\n      break;\r\n    case \"Enter\":\r\n      currentOpenedMenu.value?.triggerCurrentItemClick(e);\r\n      break;\r\n    default:\r\n      handled = false;\r\n      break;\r\n  }\r\n  if (handled && currentOpenedMenu.value) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n}\r\nfunction onBodyScroll() {\r\n  //close when docunment scroll\r\n  if (options.value.closeWhenScroll !== false)\r\n    closeMenu();\r\n}\r\nfunction onBodyClick(e: MouseEvent) {\r\n  checkTargetAndClose(e.target as HTMLElement, e);\r\n}\r\nfunction checkTargetAndClose(target: HTMLElement, e: MouseEvent) {\r\n  //Loop target , Check whether the currently clicked element belongs to the current menu.\r\n  // If yes, it will not be closed\r\n  while (target) {\r\n    if (target.classList && target.classList.contains('mx-menu-host'))\r\n      return;\r\n    target = target.parentNode as HTMLElement;\r\n  }\r\n  if (options.value.clickCloseOnOutside !== false) {\r\n    //Close menu\r\n    removeBodyEvents();\r\n    closeMenu();\r\n  } else {\r\n    options.value.onClickOnOutside?.(e);\r\n  }\r\n}\r\n\r\n//provide globalOptions for child use\r\nprovide('globalOptions', options);\r\nprovide('globalCloseMenu', closeMenu);\r\nprovide('globalIsFullScreenContainer', props.isFullScreenContainer);\r\n//check slot exists\r\nprovide('globalHasSlot', (name: string) => {\r\n  return slots[name] !== undefined;\r\n});\r\n//render slot\r\nprovide('globalRenderSlot', (name: string, params: Record<string, unknown>) => {\r\n  return renderSlot(slots, name, { ...params }, () => [ h('span', 'Render slot failed') ], false);\r\n});\r\n//provide menuContext for child use\r\nprovide('menuContext', {\r\n  zIndex: options.value.zIndex || MenuConstOptions.defaultZindex,\r\n  container: container.value as unknown as HTMLElement,\r\n  adjustPadding: { x: 0, y: 0 },\r\n  getParentAbsY: () => options.value.x,\r\n  getParentAbsX: () => options.value.y,\r\n  getZoom: () => options.value.zoom || MenuConstOptions.defaultZoom,\r\n  getParentX: () => 0,\r\n  getParentY: () => 0,\r\n  getParentWidth: () => 0,\r\n  getParentHeight: () => 0,\r\n  getPositon: () => [options.value.x,options.value.y],\r\n  closeOtherSubMenuWithTimeOut: () => {/* Do nothing */},\r\n  checkCloseOtherSubMenuTimeOut: () => false,\r\n  addOpenedSubMenu: () => {/* Do nothing */},\r\n  closeOtherSubMenu: () => {/* Do nothing */},\r\n  getParentContext: () => null,\r\n  getSubMenuInstanceContext: () => null,\r\n  getElement: () => null,\r\n  addChildMenuItem: () => {/* Do nothing */},\r\n  removeChildMenuItem: () => {/* Do nothing */},\r\n  markActiveMenuItem: () => {/* Do nothing */},\r\n  markThisOpenedByKeyBoard: () => {/* Do nothing */},\r\n  isOpenedByKeyBoardFlag: () => false,\r\n  isMenuItemDataCollectedFlag: () => false,\r\n} as SubMenuParentContext);\r\n\r\n//Expose instance function\r\ndefineExpose(instance);\r\n</script>\r\n\r\n<style>\r\n.mx-menu-ghost-host {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  top: 0;\r\n  overflow: hidden;\r\n  pointer-events: none;\r\n}\r\n.mx-menu-ghost-host.fullscreen {\r\n  position: fixed;\r\n}\r\n</style>\r\n","<script lang=\"ts\">\r\nimport { defineComponent, h, Teleport, toRefs, ref } from 'vue'\r\nimport type { PropType, VNode } from 'vue'\r\nimport type { ContextMenuInstance, MenuOptions } from './ContextMenuDefine'\r\nimport { genContainer } from \"./ContextMenuUtils\";\r\nimport ContextSubMenuWrapperConstructor from './ContextSubMenuWrapper.vue'\r\n\r\nexport type GlobalHasSlot = (name: string) => boolean;\r\nexport type GlobalRenderSlot = (name: string, params: Record<string, unknown>) => VNode;\r\n\r\n/**\r\n * Context menu component\r\n */\r\nexport default defineComponent({\r\n  name: 'ContextMenu',\r\n  emits: [ 'update:show', 'close' ],\r\n  props: {\r\n    /**\r\n     * Menu options\r\n     */\r\n    options: {\r\n      type: Object as PropType<MenuOptions>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Show menu?\r\n     */\r\n    show: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n  },\r\n  setup(props, ctx) {\r\n\r\n    const {\r\n      options,\r\n      show,\r\n    } = toRefs(props);\r\n\r\n    const menuRef = ref<ContextMenuInstance | null>(null);\r\n\r\n    ctx.expose({\r\n      closeMenu: () => ctx.emit('update:show', false),\r\n      isClosed: () => !show.value,\r\n      getMenuRef: () => menuRef.value?.getMenuRef(),\r\n      getMenuDimensions: () => menuRef.value?.getMenuDimensions() ?? { width: 0, height: 0 },\r\n    });\r\n\r\n    return () => {  \r\n      const { isNew, container, eleId } = genContainer(options.value);\r\n      \r\n      return [\r\n        h(\r\n          Teleport,\r\n          { to: `#${eleId}` },\r\n          [\r\n            h(ContextSubMenuWrapperConstructor as unknown as string, {\r\n              ref: menuRef,\r\n              options: options,\r\n              show: show,\r\n              container: container,\r\n              isFullScreenContainer: !isNew,\r\n              onClose: (fromItem: undefined) => {\r\n                ctx.emit('update:show', false);\r\n                ctx.emit('close');\r\n                options.value.onClose?.(fromItem);\r\n              },\r\n            }, ctx.slots)\r\n          ]\r\n        )\r\n      ];\r\n    }\r\n  },\r\n})\r\n</script>\r\n","<script lang=\"ts\">\r\nimport { defineComponent, h, inject, ref, toRefs } from 'vue'\r\nimport type { PropType, Ref, SVGAttributes } from 'vue'\r\nimport ContextSubMenuConstructor from './ContextSubMenu.vue';\r\nimport ContextMenuItemConstructor from './ContextMenuItem.vue';\r\nimport type { MenuOptions } from './ContextMenuDefine';\r\n\r\nexport default defineComponent({\r\n  name: 'ContextMenuGroup',\r\n  props: {\r\n     /**\r\n     * Is this menu disabled? \r\n     */\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n     /**\r\n     * Is this menu hidden? \r\n     */\r\n    hidden: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * Is this menu disabled? \r\n     */\r\n    clickHandler: {\r\n      type: Function as PropType<() => void>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Menu label\r\n     */\r\n    label: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Menu icon (for icon class)\r\n     */\r\n    icon: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Custom icon library font class name.\r\n     * \r\n     * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n     */\r\n    iconFontClass: {\r\n      type: String,\r\n      default: 'iconfont'\r\n    },\r\n    /**\r\n     * Is this menu item checked?\r\n     * \r\n     * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.\r\n     */\r\n     checked: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * Shortcut key text display on the right.\r\n     * \r\n     * The shortcut keys here are only for display. You need to handle the key events by yourself.\r\n     */\r\n    shortcut: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Display icons use svg symbol (`<use xlink:href=\"#icon-symbol-name\">`) ， only valid when icon attribute is empty.\r\n     */\r\n    svgIcon: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.\r\n     */\r\n    svgProps: {\r\n      type: Object as PropType<SVGAttributes>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Should a fixed-width icon area be reserved for menu items without icon. (this item)\r\n     * \r\n     * Default is true .\r\n     * \r\n     * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n     */\r\n    preserveIconWidth: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /**\r\n     * Show right arrow on this menu?\r\n     */\r\n    showRightArrow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * Should close menu when Click this menu item ?\r\n     */\r\n    clickClose: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n     * By default, the submenu will automatically adjust its position to prevent it overflow the container.\r\n     * \r\n     * If you allow menu overflow containers, you can set this to false.\r\n     * \r\n     * Default is inherit from `MenuOptions.adjustPosition`  .\r\n     */\r\n    adjustSubMenuPosition: {\r\n      type: Boolean,\r\n      default: undefined\r\n    },\r\n    /**\r\n     * Max width of submenu\r\n     */\r\n    maxWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Min width of submenu\r\n     */\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n  },\r\n  setup(props, ctx) {\r\n    \r\n    const options = inject('globalOptions') as Ref<MenuOptions>;\r\n    const { adjustSubMenuPosition, maxWidth, minWidth } = toRefs(props);\r\n    const adjustSubMenuPositionValue = typeof adjustSubMenuPosition.value !== 'undefined' ? adjustSubMenuPosition.value : options.value.adjustPosition;\r\n    \r\n    const subMenuRef = ref();\r\n    const itemRef = ref();\r\n\r\n    ctx.expose({\r\n      getSubMenuRef: () => subMenuRef.value,\r\n      getMenuItemRef: () => itemRef.value,\r\n    })\r\n\r\n    //Create Item\r\n    return () => h(ContextMenuItemConstructor, {\r\n      ...props,\r\n      ref: itemRef,\r\n      showRightArrow: true,\r\n      maxWidth: undefined,\r\n      minWidth: undefined,\r\n      adjustSubMenuPosition: undefined,\r\n      hasChildren: typeof ctx.slots.default !== undefined,\r\n    }, ctx.slots.default ? {\r\n      //Create SubMenu\r\n      submenu: () => h(ContextSubMenuConstructor, {\r\n        ref: subMenuRef,\r\n        maxWidth: maxWidth.value,\r\n        minWidth: minWidth.value,\r\n        adjustPosition: adjustSubMenuPositionValue,\r\n      }, {\r\n        default: ctx.slots.default,\r\n      })\r\n    } : undefined);\r\n  },\r\n})\r\n</script>","import { h, ref, render } from \"vue\";\r\nimport type { App, Slot } from \"vue\";\r\nimport type { ContextMenuInstance } from \"./ContextMenuDefine\";\r\nimport type { MenuOptions } from \"./ContextMenuDefine\";\r\nimport { checkOpenedContextMenu, closeContextMenu } from \"./ContextMenuMutex\";\r\nimport { genContainer, transformMenuPosition } from \"./ContextMenuUtils\";\r\nimport ContextMenuConstructor from './ContextMenu.vue'\r\nimport ContextSubMenuWrapperConstructor from './ContextSubMenuWrapper.vue'\r\nimport ContextSubMenuConstructor from './ContextSubMenu.vue'\r\nimport ContextMenuItemConstructor from './ContextMenuItem.vue'\r\nimport ContextMenuGroupConstructor from './ContextMenuGroup.vue'\r\nimport ContextMenuSeparatorConstructor from './ContextMenuSeparator.vue'\r\n\r\nfunction initInstance(\r\n  options: MenuOptions, \r\n  container: HTMLElement, \r\n  isNew: boolean, \r\n  customSlots?: Record<string, Slot>,\r\n) {\r\n  const show = ref(true);\r\n  const vnode = h(ContextSubMenuWrapperConstructor, { \r\n    options: options,\r\n    show: show,\r\n    container: container,\r\n    isFullScreenContainer: !isNew,\r\n    onCloseAnimFinished: () => {\r\n      render(null, container);\r\n    },\r\n    onClose: (item: undefined) => {\r\n      options.onClose?.(item);\r\n      show.value = false;\r\n    },\r\n  }, customSlots);\r\n  render(vnode, container);\r\n  return vnode.component;\r\n}\r\n\r\n//Show global contextmenu\r\nfunction $contextmenu(options : MenuOptions, customSlots?: Record<string, Slot>) {\r\n  const container = genContainer(options);\r\n  const component = initInstance(options, container.container, container.isNew, customSlots);\r\n  return (component as unknown as Record<string, unknown>).exposed as ContextMenuInstance;\r\n}\r\n\r\nexport default {\r\n  /**\r\n   * For Vue install\r\n   * @param app \r\n   */\r\n  install(app: App<Element>) : void {\r\n    app.config.globalProperties.$contextmenu = $contextmenu;\r\n    app.component('ContextMenu', ContextMenuConstructor);\r\n    app.component('ContextMenuItem', ContextMenuItemConstructor);\r\n    app.component('ContextMenuGroup', ContextMenuGroupConstructor);\r\n    app.component('ContextMenuSperator', ContextMenuSeparatorConstructor);\r\n    app.component('ContextMenuSeparator', ContextMenuSeparatorConstructor);\r\n    app.component('ContextSubMenu', ContextSubMenuConstructor);\r\n  },\r\n  /**\r\n   * Show a ContextMenu in page, same as `this.$contextmenu`\r\n   * \r\n   * For example:\r\n   * \r\n   * ```ts\r\n   * onContextMenu(e : MouseEvent) {\r\n   *   //prevent the browser's default menu\r\n   *   e.preventDefault();\r\n   *   //show your menu\r\n   *   ContextMenu.showContextMenu({\r\n   *     x: e.x,\r\n   *     y: e.y,\r\n   *     items: [\r\n   *       { \r\n   *         label: \"A menu item\", \r\n   *         onClick: () => {\r\n   *           alert(\"You click a menu item\");\r\n   *         }\r\n   *       },\r\n   *       { \r\n   *         label: \"A submenu\", \r\n   *         children: [\r\n   *           { label: \"Item1\" },\r\n   *           { label: \"Item2\" },\r\n   *           { label: \"Item3\" },\r\n   *         ]\r\n   *       },\r\n   *     ]\r\n   *   }); \r\n   * }\r\n   * ```\r\n   * \r\n   * You can pass customSlots to custom rendering this menu.\r\n   * \r\n   * For example, custom rendering #itemRender and #separatorRender:\r\n   * ```ts\r\n   *   ContextMenu.showContextMenu({\r\n   *     ...\r\n   *   } as MenuOptions, {\r\n   *     //Use slot in function mode\r\n   *     itemRender: ({ disabled, label, icon, showRightArrow, onClick, onMouseEnter }) => [  h('div', { \r\n   *       class: 'my-menu-item'+(disabled?' disabled':''),\r\n   *       onMouseenter: onMouseEnter,\r\n   *       onClick: onClick,\r\n   *     }, [\r\n   *       icon ? h('img', { src: icon }) : h('div', { class: 'icon-place-holder' }),\r\n   *       h('span', label),\r\n   *       showRightArrow ? h('span', { class: 'right-arraw' }, '>>') : h('div'),\r\n   *     ]) ],\r\n   *     separatorRender: () => [ h('div', { class: 'my-menu-sperator' }) ]\r\n   *   })\r\n   * ```\r\n   * \r\n   * @param options The options of ContextMenu\r\n   * @param customSlots You can provide some custom slots to customize the rendering style of the menu. These slots are the same as the slots of component ContextMenu.\r\n   * @returns Menu instance \r\n   */\r\n  showContextMenu(options : MenuOptions, customSlots?: Record<string, Slot>) : ContextMenuInstance {\r\n    return $contextmenu(options, customSlots);\r\n  },\r\n  /**\r\n   * Get if there is a menu open now.\r\n   */\r\n  isAnyContextMenuOpen() {\r\n    return checkOpenedContextMenu();\r\n  },\r\n  /**\r\n   * Close the currently open menu\r\n   */\r\n  closeContextMenu,\r\n  //Tools\r\n  transformMenuPosition,\r\n}\r\n\r\n","<template>\r\n  <svg class=\"mx-menu-bar-icon-menu\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><path d=\"M133.310936 296.552327l757.206115 0c19.781623 0 35.950949-16.169326 35.950949-35.950949 0-19.781623-15.997312-35.950949-35.950949-35.950949L133.310936 224.650428c-19.781623 0-35.950949 16.169326-35.950949 35.950949C97.359987 280.383 113.529313 296.552327 133.310936 296.552327z\"></path><path d=\"M890.51705 476.135058 133.310936 476.135058c-19.781623 0-35.950949 16.169326-35.950949 35.950949 0 19.781623 16.169326 35.950949 35.950949 35.950949l757.206115 0c19.781623 0 35.950949-16.169326 35.950949-35.950949C926.467999 492.304384 910.298673 476.135058 890.51705 476.135058z\"></path><path d=\"M890.51705 727.447673 133.310936 727.447673c-19.781623 0-35.950949 15.997312-35.950949 35.950949s16.169326 35.950949 35.950949 35.950949l757.206115 0c19.781623 0 35.950949-15.997312 35.950949-35.950949S910.298673 727.447673 890.51705 727.447673z\"></path></svg>\r\n</template>","<template>\r\n  <div \r\n    :class=\"[ \r\n      'mx-menu-bar',\r\n      options.theme ?? '',\r\n      options.mini ? 'mini' : '',\r\n    ]\"\r\n    @focus=\"onFocus\"\r\n    @blur=\"onBlur\"\r\n  >\r\n    <slot name=\"prefix\" />\r\n    \r\n    <div \r\n      v-if=\"options.mini\"\r\n      ref=\"menuBarContent\"\r\n      class=\"mx-menu-bar-content\"\r\n    >\r\n      <div \r\n        class=\"mx-menu-bar-item\"\r\n        @click=\"onItemClick(0, null)\"\r\n      >\r\n        <MenuBarIconMenu />\r\n      </div>\r\n    </div>\r\n    <div \r\n      v-else\r\n      ref=\"menuBarContent\"\r\n      class=\"mx-menu-bar-content\"\r\n    >\r\n      <div \r\n        v-for=\"(item, key) in menuItems\" \r\n        :key=\"key\"\r\n        :class=\"[\r\n          'mx-menu-bar-item',\r\n          item == menuActive ? 'active' : '',\r\n        ]\"\r\n        @click=\"onItemClick(key, item as MenuItem)\"\r\n        @mouseenter=\"onItemEnter(key, item as MenuItem)\"\r\n      >\r\n        {{ item.label }}\r\n      </div>\r\n    </div>\r\n    <slot name=\"suffix\" />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n/**\r\n * Menu bar component\r\n */\r\nimport { ref, nextTick, type PropType, onMounted, watch } from 'vue';\r\nimport type { MenuBarOptions } from './MenuBar';\r\nimport type { ContextMenuInstance, MenuItem } from './ContextMenuDefine';\r\nimport { getTop, getLeft } from './ContextMenuUtils';\r\nimport ContextMenu from './ContextMenuInstance';\r\nimport MenuBarIconMenu from './MenuBarIconMenu.vue';\r\n\r\nconst props = defineProps({\r\n  /**\r\n   * Menu options\r\n   */\r\n  options: {\r\n    type: Object as PropType<MenuBarOptions>,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst menuBarContent = ref<HTMLDivElement>();\r\nconst menuBarActive = ref(false);\r\nconst menuItems = ref<MenuItem[]>([]);\r\nconst menuActive = ref<MenuItem|null>(null);\r\n\r\nfunction onFocus() {\r\n  menuBarActive.value = true;\r\n}\r\nfunction onBlur() {\r\n  menuBarActive.value = false;\r\n}\r\n\r\nonMounted(() => {\r\n  (menuItems.value as MenuItem[]) = props.options.items || [];\r\n});\r\nwatch(() => props.options, () => {\r\n  (menuItems.value as MenuItem[]) = props.options.items || [];\r\n});\r\n\r\nlet currentMenu : ContextMenuInstance|null = null;\r\nlet currentMenuIndex = -1;\r\n\r\nfunction showNextSubMenu() {\r\n  if (currentMenuIndex < menuItems.value.length - 1)\r\n    currentMenuIndex++;\r\n  else \r\n    currentMenuIndex = 0;\r\n  showSubMenu(currentMenuIndex, menuItems.value[currentMenuIndex] as MenuItem);\r\n}\r\nfunction showPrevSubMenu() {\r\n  if (currentMenuIndex > 0)\r\n    currentMenuIndex--;\r\n  else \r\n    currentMenuIndex = menuItems.value.length - 1;\r\n  showSubMenu(currentMenuIndex, menuItems.value[currentMenuIndex] as MenuItem);\r\n}\r\nfunction getMenuShowPos(ele: HTMLElement) {\r\n  const showDirection = props.options.barPopDirection ?? 'bl';\r\n  let x = 0; \r\n  let y = 0;\r\n  if (showDirection.startsWith('b'))\r\n    y = getTop(ele) + ele.offsetHeight;\r\n  else if (showDirection.startsWith('t'))\r\n    y = getTop(ele);\r\n  else \r\n    y = getTop(ele) + ele.offsetHeight / 2;\r\n\r\n  if (showDirection.endsWith('l'))\r\n    x = getLeft(ele);\r\n  else if (showDirection.startsWith('r'))\r\n    x = getLeft(ele) + ele.offsetWidth;\r\n  else \r\n    x = getLeft(ele) + ele.offsetWidth / 2;\r\n\r\n  return { x, y }\r\n}\r\nfunction showSubMenu(index: number, item: MenuItem) {\r\n  currentMenuIndex = index;\r\n  if (!item.children)\r\n    return;\r\n  if (currentMenu) {\r\n    currentMenu.closeMenu();\r\n    currentMenu = null;\r\n    menuBarActive.value = true;\r\n  }\r\n  (menuActive.value as MenuItem) = item;\r\n  const ele = menuBarContent.value?.children[index] as HTMLElement;\r\n  if (ele) {\r\n    const { x, y } = getMenuShowPos(ele);\r\n\r\n    currentMenu = ContextMenu.showContextMenu({\r\n      ...props.options,\r\n      items: item.children,\r\n      x,\r\n      y,\r\n      onKeyFocusMoveLeft() {\r\n        showPrevSubMenu();\r\n      },\r\n      onKeyFocusMoveRight() {\r\n        showNextSubMenu();\r\n      },\r\n      onClose() {\r\n        if (menuActive.value == item) {\r\n          menuBarActive.value = false;\r\n          menuActive.value = null;\r\n        }\r\n        if (typeof item.onSubMenuClose === 'function')\r\n          item.onSubMenuClose(undefined);\r\n      },\r\n    });\r\n\r\n    if (currentMenu && typeof item.onSubMenuOpen === 'function')\r\n      item.onSubMenuOpen(undefined);\r\n  }\r\n}\r\nfunction showAllSubMenu() {\r\n  currentMenuIndex = 0;\r\n  const ele = menuBarContent.value as HTMLElement;\r\n  if (ele) {\r\n    const { x, y } = getMenuShowPos(ele);\r\n    currentMenu = ContextMenu.showContextMenu({\r\n      ...props.options,\r\n      x,\r\n      y,\r\n    });\r\n  }\r\n}\r\n\r\nfunction onItemClick(index: number, item: MenuItem|null) {\r\n  if (item) {\r\n    menuBarActive.value = true;\r\n    showSubMenu(index, item);\r\n    if (\r\n      item.onClick && (\r\n      (item.clickableWhenHasChildren === true && item.children && item.children.length > 0)\r\n      || !item.children || item.children.length === 0)\r\n    )\r\n      item.onClick();\r\n  } else {\r\n    showAllSubMenu();\r\n  }\r\n}\r\nfunction onItemEnter(index: number, item: MenuItem) {\r\n  if (menuBarActive.value) {\r\n    showSubMenu(index, item);\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import './MenuBar.scss';\r\n</style>"],"names":["currentOpenedContextMenu","checkOpenedContextMenu","addOpenedContextMenu","inst","closeContextMenu","removeOpenedContextMenu","MenuConstOptions","getTop","e","stopNode","offset","getLeft","transformMenuPosition","offsetX","offsetY","container","DEFAULT_CONTAINER_ID","GEN_CONTAINER_ID","containerId","genContainer","options","getContainer","zIndex","eleId","solveNumberOrStringSize","value","VNodeRender","defineComponent","props","vnode","data","toRefs","_hoisted_1","_hoisted_3","_sfc_render","_ctx","_cache","__props","emit","__emit","clickHandler","clickClose","clickableWhenHasChildren","disabled","hidden","label","icon","iconFontClass","showRightArrow","shortcut","hasChildren","showSubMenu","ref","keyBoardFocusMenu","menuItemRef","inject","globalHasSlot","globalRenderSlot","globalCloseMenu","menuContext","menuItemInstance","onMouseEnter","onClick","provide","onMounted","nextTick","index","parentEl","indexCounting","i","el","onBeforeUnmount","currentTarget","closeSubMenu","getItemDataForChildren","__expose","_sfc_main$6","_component_VNodeRender","_resolveComponent","_openBlock","_createBlock","_createElementBlock","_sfc_main$5","ContextMenuItem","ContextMenuSeparator","ContextMenuIconRight","parentContext","getParentWidth","getParentHeight","getZoom","adjustPosition","submenuRoot","menu","scroll","upScrollButton","openedSubMenuClose","globalSetCurrentSubMenu","menuItems","currentItem","leaveTimeout","blurCurrentMenu","setAndFocusNotDisableItem","isDown","startIndex","setAndFocusCurrentMenu","overflow","element","scrollValue","scrollHeight","maxHeight","onSubMenuBodyClick","thisMenuInsContext","parent","thisMenuContext","conext","_a","isOpenedByKeyBoardFlag","isMenuItemDataCollectedFlag","position","closeFn","k","item","updateState","exposeContext","v","x","y","onScroll","down","onMouseWhellMx","onMouseWhell","pos","menuEl","parentWidth","parentHeight","fillPaddingX","fillPaddingYAlways","_b","fillPaddingY","windowHeight","windowWidth","avliableWidth","avliableHeight","absX","absY","xOverflow","yOverflow","ox","maxSubWidth","oy","maxSubHeight","_hoisted_2","_normalizeClass","_normalizeStyle","args","_createElementVNode","_createCommentVNode","_Fragment","_renderList","_component_ContextMenuSeparator","_component_ContextMenuItem","_createSlots","_withCtx","_createVNode","_component_ContextSubMenu","_withDirectives","$event","_component_ContextMenuIconRight","_vShow","slots","useSlots","submenuInstance","show","openMenu","removeBodyEvents","watch","instance","closeMenu","isClosed","closed","installBodyEvents","fromItem","onBodyClick","onBodyScroll","onMenuKeyDown","currentOpenedMenu","handled","_c","_d","_e","_f","_g","_i","_h","_j","_l","_k","_m","checkTargetAndClose","target","name","params","renderSlot","h","_sfc_main$3","ctx","menuRef","isNew","Teleport","ContextSubMenuWrapperConstructor","_sfc_main$2","adjustSubMenuPosition","maxWidth","minWidth","adjustSubMenuPositionValue","subMenuRef","itemRef","ContextMenuItemConstructor","ContextSubMenuConstructor","initInstance","customSlots","render","$contextmenu","Inst","app","ContextMenuConstructor","ContextMenuGroupConstructor","ContextMenuSeparatorConstructor","_hoisted_5","menuBarContent","menuBarActive","menuActive","onFocus","onBlur","currentMenu","currentMenuIndex","showNextSubMenu","showPrevSubMenu","getMenuShowPos","ele","showDirection","ContextMenu","showAllSubMenu","onItemClick","onItemEnter"],"mappings":"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"}